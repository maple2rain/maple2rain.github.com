---
layout: post
author: LPF
title: 接口的不同类型和接口错误
date: 2017-05-03 14:18:50
updated: 2017-05-08 21:01:56
tags:
- Testing
categories:
- Study
- Computer
- Testing
---
## 接口类型

在软件设计中，模块化是一项重要原则，模块之间通过接口交互来实现系统的功能需求。两个模块间的接口使得一个模块能够访问另一个模块提供的服务。接口实现了模块间的控制和数据的传递机制。有如下三种常用接口模块：

- `过程调用接口`：模块中的一个过程调用其他模块的一个过程。调用方将控制转移给被调用方。调用方可以将数据传递给被调用过程，被调用方在将控制转移给调用方的同时可以将数据传递回调用方。
- `共享内存接口`：两个模块共享一块内存。两个模块中的一个模块分配内存块。数据由一个模块写入该内存块并由另一个模块读取。
- `消息传递接口`：一个模块在将数据结构的值域初始化之后，准备好一条消息并将其发送到另一个模块。这种方式的模块交互通常出现在客户——服务器系统即Web系统中。

## 接口错误

开发人员按照各自的标准测试模块。问题是，既然所有单元测试过的模块能独立工作，为什么将它们放在一起却不能工作了呢？当我们把模块**放到一起**的时候，由于无法控制的接口错误，问题就出现了。接口错误是一些和结构相关的错误，这些结构位于模块局部环境之外但为该模块所使用。接口错误分类如下：

- `构造`：有些编程语言如C，将接口说明和代码实现进行了分离。在一段C程序中，开发人员可以编写一条语句`#include header.h`，*header.h*包含了一个接口说明。由于这种接口说明与实际代码位于不同的地方，开发人员在编写代码时往往忽略了接口说明。因此不合理地使用**#include**语句产生了构造错误。
- `功能缺乏`：这些错误产生于一种隐式假设——系统的一部分假定该系统的另一部分能提供某种功能。事实上，这个`另一部分`并没有提供预期功能。这种情况可能时编写该部分代码的开发人员有意或无意造成的。
- `功能位置`：对于一个功能位置的误解造成了这类的错误。由于这些错误没有出现在代码层面，因此这类问题的出现归结于设计方法论。另外，缺乏经验的开发人员也会造成这样的问题。
- `功能改变`：对一个模块进行了修改，但没有对相关模块进行修改，从而影响了程序的功能。
- `功能增加`：在修改系统时增加了一个全新的功能模块。在向版本控制系统中提交了模块代码后，没有进行变更请求的任何功能增加属于该类错误。
- `接口误用`：模块在使用一个被调用模块的接口时发生了错误。这通常发生在过程调用接口时。接口误用包括错误的参数类型、错误的参数顺序或错误的传入参数个数。
- `接口误解`：调用模块可能会误解一个被调用模块的接口说明。被调用模块可能假设了某些传入参数需要满足一些特定条件，但调用方并不能保证这些请求。例如，假设使用二分查找算法，要求传入一个有序数组，但是调用模块没有传入一个有序数组，从而导致错误，这就是一个接口误解。
- `数据结构变更`：本质上该类错误和上面讨论的功能问题类似，但是它们往往发生在更详细的设计层面上。当一个数据结构的容量不够或者没有包含足够数量的信息域时就会发生这个问题。这类错误的发生是由于高层设计没有清楚地描述数据结构的功能需求所导致的。
- `不充分的错误处理`：一个被调用模块可能会给调用模块返回一个错误码。但是，调用模块可能没有合理地处理该错误。
- `错误处理的附加项`：这类错误产生于对其他模块的变更操作，这些变更需要某个模块的错误处理做相应的变更。这种情况下，可能是现有的模块错误处理缺少了一些必要的功能来辅助追踪错误，或者现有的错误处理技术需要修改。
- `不充分的后处理`：这类错误是因为未能释放某些不再使用资源，例如释放内存错误。
- `不充分的接口支持`：所提供的实际功能不足以支持接口规定的功能。例如，模块将一个用摄氏温度表示的温度值传递给只能解释华氏温度的模块。
- `初始化/值错误`：未能对变量的数据结构进行初始化及赋值造成了这类错误。这类问题通常是工作人员的粗心造成。
- `违反数据约束`：程序的实现不支持数据项之间的某些关系，这可能是由于不完整的设计规范造成的。
- `时效性/性能问题`：该错误是由于通信进程间的不适当同步造成的。
- `变更协同`：这类错误是由于没有将一个软件模块的变更同步到和其相关的模块中所产生的。
- `硬件/软件接口`：这类错误是由于软件不能很好地处理硬件设备造成的。

## 系统集成测试优点

由于在模块上进行的单元测试只能测试该模块内的计算，为了发现接口错误，模块间必须有一定交互，因此执行模块单元测试无法检查出接口错误。进行系统层次的测试很难发现接口错误，因为这些错误隐藏在系统内部。为了尽早地解决问题，所有需要进行系统集成测试，其优点如下：

- 尽早发现错误
- 越早发现，越容易处理
- 对单个模块和整个系统的性能和可接受度有一个尽早的反馈
- 灵活地安排错误处理，并且能和开发同步

[1] Kshirasagar Naik. 软件测试与质量保证[M]. 郁莲, 译. 北京:电子工业出版社, 2013.1:110-113.