---
layout: post
author: LPF
title: 用户信息
date: 2016-10-30 16:01:10
updated: 2017-02-21 15:12:12
tags:
- LinuxAPI
categories:
- Study
- Computer
- OS
- Linux
- API
- Environment
---

## 1 获取用户信息

### 1.1 getuid

**getuid**函数返回程序关联的UID，通常是启动程序的用户UID。

- 函数原型

    ```c
    /**
     * uid_t    :16位整数类型
     * 返回值   :用户uid
     * 头文件   :sys/types.h, unistd.h
     */
    uid_t getuid(void);
    ```

### 1.2 getlogin

**getlogin**函数返回与当前用户关联的登录名。

- 函数原型

    ```c
    /**
     * 返回值   :用户登录名
     * 头文件   :sys/types.h, unistd.h
     */
    char *getlogin(void);
    ```

### 1.3 更多用户信息

密码数据库结构**passwd**定义在**pwd.h**，如下表所示：

|    passwd成员   |      说明     |
|-----------------|---------------|
| char  *pw_name  | 用户登录名    |
| uid_t pw_uid    | UID号         |
| gid_t pw_gid    | GID号         |
| char  *pw_dir   | 用户家目录    |
| char  *pw_gecos | 用户全名      |
| char  *pw_shell | 用户默认shell |


- 获取方式

```c
/**
 * 头文件  :sys/types.h,pwd.h
 * 参数    :分别是用户UID和用户名
 * 返回值  :passwd密码数据库结构;出错时返回空指针并设置errno
 */
struct passwd *getpwuid(uid_t uid);
struct passwd *getpwnam(const char *name);
```
    
- 例子

```c
#include <stdio.h>
#include <sys/types.h>
#include <pwd.h>
#include <stdlib.h>
#include <unistd.h>

int main(void)
{
    uid_t uid;
    gid_t gid;

    struct passwd *pw;

    /*获取uid和gid*/
    uid = getuid();
    gid = getgid();

    /*打印用户信*/
    printf("User is %s\n", getlogin());
    printf("This user's ID are: uid=%d, gid=%d\n", uid, gid);

    /*获取更多信息*/
    pw = getpwuid(uid);
    printf("UID passwd entry:\n name=%s, uid=%d, gid=%d, homedir=%s, def_shell=%s\n",
                pw->pw_name, pw->pw_uid, pw->pw_gid, pw->pw_dir, pw->pw_shell);

    /*获取root信息*/
    pw = getpwnam("root");
    printf("root passwd entry:\n name=%s, uid=%d, gid=%d, homedir=%s, def_shell=%s\n", 
                pw->pw_name, pw->pw_uid, pw->pw_gid, pw->pw_dir, pw->pw_shell);

    exit(0);
}
```

- 执行结果
    ![执行结果](../post_img/5815a937ab644164d40043ff)
