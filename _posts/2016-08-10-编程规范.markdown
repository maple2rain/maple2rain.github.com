---
layout: post
author: LPF
title: 编程规范
date: 2016-08-10 20:00:21
updated: 2017-05-09 17:17:02
tags:
- Standard
categories:
- Study
- Computer
- Programmer
- standard
---
	1. 源代码的排版
		a. 程序块要采用缩进风格编写，缩进空格数以4个为宜
		b. 相对独立的程序块之间、bianliing说明之后必须加空行，并注释其功能
		c. 较长的语句要分成多书写（语句一般不多于80个字符），长表达式要在操作符处划分新行，操作符放在新行之首，并适当缩进
		d. 循环、判断等语句中若有较长的表达式或语句，要按照第三点适当划分
		e. 若函数中参数过长，也应适当划分
		f. 严格一行只写一条语句
		g. 逐一声明每一个变量可以提高程序的可读性
		h. if, for, do, while, case, switch, default等语句自占一行，且if, for, do ,while等语句的执行语句部分无论多少都要加｛｝
		如：if ( condition )
			{
				return ;
			}
		i. 对齐时可以用Tab键，设置其为4个空格大小，但不保证移植时其他编译器的Tab键也是4个空格的大小；
		j. 程序块的分界符（如花括号｛｝）应独占一行且位于同一列，同时与他们的语句左对齐。所有定义与if, for, do, while, case, switch语句都应按照这种方式
		如：if ( condition )
			{
				… //code
			}
		k. 在两个以上的关键字、变量、常量进行对等操作时，他们之间的操作符之前、之后或前后都要加空格；若是立即操作符（如->）则前后不加空格：
			i. 逗号、分号只在后面加空格
				1) int a, b, c;
			ii. 比较操作符、赋值操作符、算术操作符、逻辑操作符、位域操作符等双目操作符的前后都加空格
				1) if ( condition )
				2) a = b + c;
				3) a += 2;
				4) a = b ^ 2;
				5) a <<= 1;
			iii. 单目操作符前或后面不加空格
				1) *p = 'a';
				2) flag = !isEmpty;
				3) p = &mem;
				4) i++;
			iv. if, for, while, switch语句括号间加空格
				1) if ( (a >= b) && (c > d) )
	
	2. 源代码注释
		a. 说明性文件头部应进行注释
		/********************************************************  
		*	CopyRight					:   版权
		*	FileName					:   文件名
		*	Author/Corportation			:   作者
		*	Create Data					:   创建时间
		*	ModuleName				:   模块名称
		*
		*	CPU					          :   所用何种CPU
		*	SYSTEM					:   何种操作系统
		*
		*
		*	Abstract Description		          :    模块描述	 
		*--------------------------------Revision History--------------------------
		*Version	Date	        Revised By	Description      Item	
		*版本号       修改日期   修改者           修改简介         备注
		*
		********************************************************/
		b. 函数头部应进行注释
		/**
		*@Name..............: 函数名称
		*@Description.....: 功能描述
		*@Parameters.....: 参数说明
		*@Return values.: 返回值说明
		*@notice.............:提醒
		*/
		c. 注释应与编写代码同步，修改代码时同时修改注释
		d. 注释的内容应清除明了，避免歧义
		e. 对代码的注释应放在其上方（程序块）或右方（单行代码），且放置上方时要加空行与上面代码隔开
		如：
			/*
			** comment
			*/
			… //code
		f. 对于一些具有物理意义的变量、常量应加以注释说明含义
		g. 数据结构声明或定义时应加以注释；对结构中每个域也可适当添加注释
		h. 全局变量应有详细注释，包括其功能、取值范围、被调用处及注意事项
		/********************************************************
		*@Description...........: 功能描述
		*@Available value.....: 取值范围
		*@Variable function..: 被调用的函数或行数
		*@Notice………………..:注意事项
		*********************************************************/
		i. 注释与代码进行同样的缩进
		j. 分支语句要加以注释
		k. 在代码的功能、意图层次上添加注释，提供有用、额外的信息
		l. 应只采取一种注释语言
	
	3. 标识符命名
		a. 要有自己的命名风格，并始终如一，避免来回变换
		b. 变量名应含有具体含义，能表明变量类型、数据类型。除了用作局部循环变量，禁止采取单个字符命名
		c. 除非有必要，否则不要用数字或奇怪的字符定义标识符
		d. 用正确的反义词组命名具有互斥意义的变量或相反动作的函数
		e. 驼峰命名法
			i. 第一个单词是全部小写，后面的单词首字母大写
			ii. 所有单词首字母大写
			
	4. 代码可读性
		a. 用括号明确表达式的操作顺序，不依赖默认优先级
		b. 避免使用不易理解的数字，应该使用有意义的标识符来代替，可以使用枚举或宏定义
		c. 关系较为紧密的代码应尽可能相邻
		d. 除非很有必要，否则不要使用不易理解的高技巧性语句
	
	5. 变量、结构
		a. 尽可能少使用全局变量
		b. 当使用全局变量传递数据时，应避免越界或不合理的赋值
		c. 避免局部变量与全局变量同名
		d. 使用严格形式定义的、可移植的数据类型，尽量不使用与具体软件或硬件关系密切的变量；
		e. 结构的功能要单一，只是针对一种事务的抽象
		f. 结构元素个数适中，可根据某种原则把元素组成不同的子结构
		g. 注意强制转换
	
	6. 函数
		a. 对所调用的函数的错误返回要仔细、全面处理
		b. 明确函数功能，精确地实现函数设计
		c. 对接口函数参数的合法性检查应由函数的调用者负责
		d. 防止将函数参数作为工作变量，可以先用局部变量代替
		e. 函数的规模应限制在200行以内（不包括注释和空格行）
		f. 为简单功能编写函数，尽管语句少，但是内容清晰
		g. 函数的功能应该是可预测的
		h. 避免设计多参数函数
		i. 检查函数参数的有效性
		j. 检查函数非参数的有效性，如文件、全局变量等
		k. 采用动宾词组为执行函数命名
		l. 防止函数或过程内出现随机内聚（随机内聚是指将没有关联或关联很弱的语句放到同一个函数或过程中，这常常造成维护不便、功能不明确）
		m. 设计高扇入、合理扇出（小于7）的函数（扇出是指一个函数直接调用（控制）其他函数的数目，而扇入是指有多少上级函数调用它）
		n. 减少函数本身或函数间的递归调用
	
	7. 程序效率
		a. 在保证软件系统的正确性、稳定性、可读性、及可测性的前提下，提高代码效率
		b. 通过对系统数据结构的划分与组织的改进，以及对程序算法的优化来提高空间效率，如将结构体根据某种原则分开化
		c. 编程时，要随时留心代码效率；优化代码时，要考虑周全
		d. 在多重循环时，应将执行次数最多的循环放在最内层
		e. 尽量用乘法或其他方法代替除法
	
	8. 质量保证
		a. 防止引用已经释放的内存空间
		b. 在函数中分配的内存，退出函数前要释放
		c. 在函数中申请的文件句柄，退出函数前要关闭
		d. 防止引用未初始化的变量
		e. 时刻注意容易混淆的操作符。编完程序后应从头到尾检查一遍，以防拼写错误
		f. 注意表达式是否会造成上溢或下溢
	
	9. 宏定义
		a. 用宏定义时，要使用完整的括号
		b. 将宏定义的多条表达式放在大括号中
		c. 使用宏时，参数应没有变化

