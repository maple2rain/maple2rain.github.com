---
layout: post
author: LPF
title: 默认参数
date: 2016-11-11 13:59:34
updated: 2017-02-21 16:01:02
tags:
- C++
categories:
- Study
- Computer
- PL
- C++
- Function
---
# 1 默认参数

通过`默认参数(default argument)`可以在函数声明时为参数给定一个值，从而在调用函数时没有指定这一参数的值时，编译器就会自动地插上这个值。
用法如下所示：

```c++
void foo(int a, int b = 0);
foo(1);//等价于foo(1, 0);
foo(1, 0);
```

上述的两个函数执行将等价。在几乎有同样含义、同样操作的两个或更多函数时，使用默认参数可以带来很大的遍历性。但如果函数之间的行为差异较大，用默认参数则不太合适`(对于这个问题，应该考虑两个差异较大的函数是否应有相同的名字)`。

## 1.1 默认参数规则

- 只有参数列表的后部参数才是可默认的，即不可在一个默认参数后面又跟一个非默认的参数
- 一旦在一个函数调用中开始使用默认参数，那么这个参数后面的所有参数都必须是默认的

默认参数只能放在函数声明中，通常在一个头文件中。编译器必须在使用该函数之前知道默认值。有时为了阅读方便，在函数定义处放上一些默认的注释值，如：

```c++
void foo(int x /* = 0 */){ // ...
```

## 1.2 占位符(placeholder)参数

函数声明时，参数可以没有标识符，当这些不带标识符的参数用作默认参数时，看起来会很有意思。如：

```c++
void foo(int x, int = 0, float = 1.1);
void foo(int x, int, float flt){ // }
```

在上述的函数体中，`x`和`flt`可以被引用，但中间的参数值则不行，因为他没有名字。
调用必须为这个占位符提供一个值，如`foo(1)`或`foo(1, 2, 3.0)`。
这种语法允许把一个参数用作占位符而不去用它。其目的在于以后可以修改函数定义而不需要修改所有的函数调用。尽管用一个有名字的参数也能达到同样的目的，但如果定义的这个参数在函数体内没有被使用，多数编译器会给出一条警告信息，并认为犯了一个逻辑错误。而用这种没有名字的参数，可以防止这种警告的产生。
更重要的是，如果开始用了一个函数参数，而后来发现不需要用他，可以将其直接置为占位符而不会产生警告错误，并且不需要修改那些调用该函数以前版本的程序代码。如在设计`API`时，如定义了以下接口：

```c++
void foo(int size, Object obj);
```

在设计后期，发现`size`可以通过对象`obj`中获得，这样就可以不用在传入`size`了，但为了避免修改之前的调用代码，可以直接将`API`声明如下：

```c++
void foo(int, Object obj);//将原本的size置为占位符参数
```

这样，就可以不用更改调用的代码，并且在定义中也不会出现歧义的情况`(放着一个不用的形参总是会让API实现者误解)`，而编译器也会对参数进行优化，使得在传参时只传入有效的参数，而忽略占位符参数。

## 1.3 默认参数使用约束

- 不能把默认参数作为一个标志去决定执行函数的哪一块，这是基本原则

    如要构造一个对象时，当尺寸参数为0时不分配空间，否则分配相应的空间，此时可能会写出如下的代码：
    
    ```c++
    Mem(int size){
        if(!size){
            buf = nullptr;
            return;
        } 
        
        buf = new byte[size + 1];
    } 
    ```
    
    上述代码看似很合理，但实际上他们是属于两个不同的版本的，且将他们组合到一个函数体内。
    实际上，上述用法导致了成员的改变，所以应该`将其分割成两个不同的函数，并以重载的方式实现`。另外，这种做法可以稍微提高程序的效率，因为额外的参数不会被传递，特定条件下的代码也不会被执行。并且，当函数特别大时，维护起来也会更容易。
    而在默认参数不会导致成员函数定义的改变，即不需要通过默认参数来决定函数的实现版本时，使用默认参数反而会对程序员大有裨益。如下所示：
    
    ```c++
    //保证存储区域有满足的最小空间
    void ensureSize(int minSize){
        if(size < minSize){//size为当前缓冲区大小
            //创建最小空间以满足需求
        }
    }
    
    //指定大小创建缓冲区
    void operateBuf(int minSize = 0){//需要对尺寸最小为size的缓冲区进行操作
        ensureSize(minSize);
        //...
    }
    ```
    在上述的`ensureSize`中，不管如何，对于`minSize`是否为0，操作总是有效的，并不会带来其他的性能消耗作用，因此使用默认参数是可行的。
    
- 一个默认的参数应该是一个在一般情况下放在这个位置的值，这个值出现的可能性比其他值要大，所以客户程序员可以忽略他或只需要改变默认值时才去用它
- 默认参数的引用主要是为了使函数调用更容易，特别是当这些函数的许多参数都有特定值时，而类的制定者能够制定参数，并将最不可能调整的默认参数放在参数列表的后部
- 默认参数的一个重要应用情况是在开始定义函数时用了一组参数，而在使用后期发现需要增加参数时，可以将新增参数作为默认参数添加在参数列表后部，从而无需改变客户代码
    