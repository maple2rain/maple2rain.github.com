title: 顺序容器
date: 2016-10-30 13:34:42
updated: 2017-02-21 14:57:35
categories:
- Study
- Computer
- PL
- C++
- Class
---

## 1 顺序容器概述

所有顺序容器都提供了快速顺序访问元素的能力，但是，这些容器在以下方面有不同的性能折中：

- 向容器添加或从容器中删除元素的代价
-  非顺序访问容器中元素的代价

## 2 顺序容器类型
|容器类型|说明|
|:---|---|
|vector|可变数组大小 <br> 支持快速随机访问 <br> 在尾部之外的位置插入或删除元素可能很慢|
|deque|双端队列<br> 支持快速随机访问 <br> 在头尾位置插入或删除操作速度很快|
|list|双向链表<br> 只支持双向顺序访问<br>在list中任何位置进行插入或删除操作都很快|
|forward_list|单向链表<br>只支持单向顺序访问<br>在链表中任何位置进行插入或删除操作都很快|
|array|固定数值大小<br>支持快速随机访问<br>不能添加和删除元素|
|string|与vector相似的容器，但专门用于保存字符<br>随机访问快<br>在尾部插入或删除速度很快|


- array
    与内置数组相比*array*是一种更安全、更容易使用的数组类型。
- forward_list
    其设计目标是达到与最好的手写的单向链表数据结构相当的性能，从而没有*size*操作。

## 3 确定使用哪种顺序容器
- 除非有很好的理由选择其他容器，否则选择*vector*
- 除非程序中有很多小的元素，且空间的额外开销很重要，则不要使用*list*和*forward_list*
- 如果程序要求随机访问元素，应使用*vector*和*string*
- 如果程序要求在容器的中间插入或删除元素，应使用*list*和*forward_list*
- 如果程序需要在头尾位置插入或删除元素，但不会在中间位置进行插入或删除操作，则使用*deque*
- 如果程序只有在读取输入时才需要在中间位置插入元素，随后需要随机访问元素
    - 首先，确定是否真的需要在容器中间添加元素
        当处理数据时，可以很容易用*vector*添加元素，再用*sort*重排元素，从而不必非在容器中间添加元素不可
    - 如果必须在中间位置插入元素，考虑在输入阶段使用*list*一旦输入完成，将*list*中的内容拷贝到另一个*vector*中
- 如果不确定，那就要研究应用中占主导地位的究竟是访问还是插入/删除操作，从而进行选择；或者使用迭代器

