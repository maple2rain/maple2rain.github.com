---
layout: post
author: LPF
title: 深入理解内核
date: 2017-01-05 17:28:13
updated: 2017-01-05 17:28:26
tags:
- Kernel
categories:
- Study
- Computer
- OS
- Linux
- Kernel
---
Linux系统的核心是内核。
内核控制着计算机系统上的所有硬件和软件：必要时分配硬件，有需要时执行软件。

## 1 系统内存管理

内核不仅管理可用物理内存，还可以创建和管理虚拟内存。
内核通过硬盘上的存储空间来实现虚拟内存，这块区域称为交换空间(**swap space**)。
内核不断地在交换空间和实际的物理内存之间反复交换虚拟内存存储单元中的内容。

### 1.1 内存存储单元

内存存储单元会被按组分成许多块，这些块称作页面(**page**).
内核会将每个内存页面放在物理内存或交换空间，然后，内核会维护一个内存页面表，来指明哪些页面位于物理内存内，哪些页面被换到磁盘上。
内核会记录哪些内存页面正在使用中，并且把一段时间未访问的内存页面复制到交换空间区域(称为**换出, swapping out**)——即使还有可用内存。
当程序要访问一个已被换出的内存页面时，内核必须从物理内存换出另外一个内存页面来给他让出空间(空间不足时)，然后从交换空间换入(**swapping in**)请求的内存页面。

### 1.2 查看虚拟内存当前状态

可以查看专门的**/proc/meminfo**文件来观察Linux系统上虚拟内存的当前状态。

### 1.3 默认情况

- 进程不能访问其他进程正在使用的内存页面
- 用户进程不能访问内核进程使用的内存

### 1.4 共享内存

为方便共享数据，可以创建一些共享内存页面，使多个进程在同一块供用内存区域进行读取和写入操作。内核负责维护和管理这些共用内存区域并控制每个进程访问这块共享区域。
每个共享内存段都有个所有者，及创建用户；每个段也都有标准的Linux权限设置来设定其他用户是否可以访问该段。
```
ipcs命令专门用来查看系统上的当前共享内存页面。
```

## 2 软件程序管理

内核创建了第一个进程(**init进程**)来启动系统上所有其他进程。当内核启动时，首先将**init**进程加载到内存中。而在启动任何其他进程时，都会在内存中给新进程分配一块专有区域来存储该进程的数据和代码。

### 2.1 启动进程

一些Linux发行版使用一个表来管理在系统开机时要自动启动的进程，其通常位于专门文件**/etc/inittab**。
另一些系统则采用**/etc/init.d**目录，将开机时启动或停止某个应用的脚本放在这个目录下，这些脚本通过**/etc/rcX.d**目录下的入口启动，其中*X*表示运行级别(**run level**)。

## 3 硬件设备管理

任何Linux系统需要与之通信的设备，都需要在内核代码中加入其驱动代码(**driver code**)。

### 3.1 插入设备驱动代码方法

- 编译进内核的设备驱动代码

    即每需要插入设备驱动代码时，都要重新编译内核。
    该方法效率较为低下。

- 可插入内核的设备驱动模块

    即把设备驱动当成模块，当需要时则以模块连接的方式进行加载进内核。
    该方法效率较高，为当前普遍使用。

### 3.2 设备文件

#### 3.2.1 设备文件种类

Linux系统将硬件设备当成特殊的文件，称为**设备文件**。

- 字符型设备文件

    设备处理数据时每次只能处理一个字符。
    大多数类型的调制解调器和终端都是作为字符型设备文件。

- 块设备文件

    设备处理数据时每次能处理大块数据，如硬盘等。

- 网络设备文件
 
    设备采用数据包发送和接收数据，包括各种网卡和一个特殊的*回环设备*。这个回环设备允许Linux系统使用通用的网络编程协议同自己通信。

#### 3.2.2 节点

Linux为系统上的每个设备都创建了一种特殊的文件，称为**节点**。
- 与设备的所有通信都是通过设备节点完成的
- 每个节点都有一个唯一的数值对，供内核标识
- 数值对包括一个主设备号和一个次设备号
    + 类似的设备号被划分到同样的主设备号下
    + 次设备号用于标识同一主设备号下的某个特殊设备。

## 4 文件系统管理

Linux内核支持多种不同类型的文件系统来从硬盘中读取或写入数据。
Linux还支持从其他操作系统所采用的文件系统中读取或写入数据，但是内核必须在编译时就加入所有可能用到的文件系统支持。

### 4.1 虚拟文件系统

Linux内核采用虚拟文件系统(**Virtual File System, VFS**)作为和每个文件系统交互的接口。
当每个文件系统被挂载和使用时，VFS将信息缓存在内存中。

- VFS

    VFS的作用就是采用标准的Unix系统调用读写位于不同物理介质上的不同文件系统。
    VFS是一个可以让open()、read()、write()等系统调用不用关心底层的存储介质和文件系统类型就可以工作的粘合层。
    在古老的DOS操作系统中，要访问本地文件系统之外的文件系统需要使用特殊的工具才能进行。而在Linux下，通过VFS，一个抽象的通用访问接口屏蔽了底层文件系统和物理介质的差异性。
    每一种类型的文件系统代码都隐藏了实现的细节。因此，对于VFS层和内核的其它部分而言，每一种类型的文件系统看起来都是一样的。
    在Linux中，VFS采用的是面向对象的编程方法。
