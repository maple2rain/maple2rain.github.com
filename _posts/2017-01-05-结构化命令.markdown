title: 结构化命令
date: 2017-01-05 16:51:12
updated: 2017-01-05 17:02:18
tags:
- Linux Shell
categories:
- Study
- Computer
- OS
- Linux
- API
- Shell
- Structure  Stament
---
## 1 if-then语句

结构化命令中，最基本的类型是**if-then**语句。

### 1.1 格式

```sh
if command
then
    commands
fi
```

**bash shell**的**if**语句会首先执行**if**行定义的命令。

- 如果该命令的退出状态码是**0**(该命令成功运行)，则运行处于**then**部分的命令
- 如果该命令的退出状态码是其他值，则**不**运行处于**then**部分的命令

在**then**部分可以像在脚本其他地方一样列出多个命令，每条命令单独占一行。

### 1.2 另一种格式

```sh
if command; then
    commands
fi
```

上述这种格式看起来就更像是其他编程语言的**if**语句了。

## 2 if-then-else语句

**if-then-else**语句使在分支执行另一组命令成为可能。

### 2.1 格式

```sh
if command
then
    commands
else
    commands
fi
```

- 当**if**语句中的命令返回退出状态码为**0**时，**then**部分会被执行
- 当**if**语句中的命令返回退出状态码不为**0**时，**else**部分会被执行

## 3.1 格式

```sh
if command1; then
    commands
elif command2; then
    commands
fi
```

- 支持使用多个**elif**语句
- 每个命令都会根据哪个命令会返回退出状态码来执行
- **bash shell**会一次执行**if**语句，但值用第一个返回退出状态码**0**的语句中的**then**部分会被执行

## 4 高级特性

### 4.1 使用双括号

**双括号**命令允许将高级数学表达式放入比较中。

- 格式

```sh
(( expression ))
```

**expression**可以是任意的数学赋值或比较表达式，包括**test**命令使用的标准数学运算符等。

- 数学符号
    
    |  符号 |   描述   |
    |-------|----------|
    | val++ | 后增     |
    | val-- | 后减     |
    | ++val | 先增     |
    | --val | 先减     |
    | !     | 逻辑取反 |
    | ~     | 位取反   |
    | **    | 幂运算   |
    | <<    | 左移     |
    |  \>\>    | 右移     |
    | &     | 位布尔与 |
    |   \\|   | 位布尔或 |
    | &&    | 逻辑与   |
    |     \\|\\|  | 逻辑或   |

- 例子

    ```sh
    val1=10
    if(( $val1 ** 2 > 90))
    then
        (( val2 = $val1 ** 2))
        echo "The square of $val1 is val2"
    fi
    ```

    上述的例子是**求10的2次方是否大于90，如果是则将其赋值给val2**，执行脚本后将会有如下输出：
    ![](../post_img/586e0915ab6441209e0047c6)

    此时，可以不需要将双括号中的大于小于号进行转义了。

### 4.2 使用双方括号

**双方括号**命令提供了针对字符串比较的高级特性。

- 格式

    ```sh
    [[ expression ]]
    ```

    **双方括号**里的**expression**采用与**test**

命令相同的字符串比较方法对字符串进行比较，但他提供了**模式匹配(pattern matching)**。
在模式匹配中，可以定义一个正则表达式来匹配字符串值。

- 例子

    ```sh
    if [[ $USER == r* ]]
    then 
        echo "Hello $USER"
    else
        echo "Sorry, I don't know you"
    fi
    ```

    上述例子中，命令匹配了**$USER**环境变量来查看它是否已字母**r**开头。
    如果是，则会执行**then**部分的命令。
    ![](../post_img/586e091fab6441236e004718)
    上图中，先使用**whoami**命令输出当前用户是谁，再执行脚本。

## 5 case命令

可以使用**case**命令来避免因需要不断检查相同变量值导致的多重**elif**语句。

- 格式

    ```sh
    case variable in
    pattern1 | pattern2)
        commands;;
    pattern3)
        commands;;
    *)
        commands;;
    esac
    ```

    + **case**命令会将指定的变量同不同模式进行比较
    + 如果变量和模式是匹配的，则会执行该模式指定的命令
    + **|**操作符表示**或**，即不同模式执行同一组命令
    + 星号*捕获跟所有模式都不匹配的值，即default选项
    + 每个模式最后都要接右括号**)**
