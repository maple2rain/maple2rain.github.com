---
layout: post
author: LPF
title: 创建和操纵表
date: 2016-10-30 09:31:31
updated: 2017-02-21 15:16:10
categories:
- Study
- DataBase
- MySQL
---

## 1 创建表

使用**CREATE TABLE**语句以创建表。

### 1.1 表创建基础

- 新表的名字在关键字**CREATE TABLE**之后给出
- 表列的名字和定义，用逗号分隔
- 可能还会包括其他关键字或选项
- 在创建新表时，指定的表名必须不存在；或者在表名后加上**IF NOT EXISTS**以在表不存在时创建表

### 1.2 例子

```SQL
CREATE TABLE emailNotes
(
    noteID      int         NOT NULL AUTO_INCREMENT,
    prodID      char(10)    NOT NULL,
    email       char(20)    NULL,
    PRIMARY KEY(noteID)
    FULLTEXT(email)      #指定email列进行全文本搜索
)ENGINE = MyISAM;        #使用MyISAM引擎
```

从上面的例子可以看出：

1. 表名**emailNotes**紧跟在**CREATE TABLE**之后
2. 实际的表定义在圆括号之中，各列之间用逗号分隔
3. 每列的定义以列名开始，后跟列的数据类型
4. 主键由关键字**PRIMARY KEY**指定，使用多个主键时用逗号分隔
5. 最后是使用的引擎及用分号结束该语句


- 语句格式化

    从上面的例子创建的表中，由于SQL语句忽略空格，所以对语句进行格式化可以很清晰地展示出表的内容是什么，因此要注意对列定义进行恰当的缩进。

### 1.3 使用NULL值

- **NULL**值就是没有值或缺值
- 允许**NULL**值的列允许在插入行时不给出该列的值
- 使用**NOT NULL**的列在插入或更新时必须有值

- 理解NULL

    **NULL**不等价于空串。NULL值是没有值，空串是**''**。
    **NOT NULL**列中允许空串的出现，因为空串是一个有效值。

### 1.4 使用AUTO_INCREMENT

- **AUTO_INCREMENT**告诉MySQL，本列每当增加一行时自动增量。每次执行一个**INSERT**操作时，MySQL自动对该列增量，给该列赋予下一个可用的值。
- 下一个可用的值是大于当前最大编号的值。
- 每一个表只允许一个**AUTO_INCREMENT**列，而且他必须被索引，如成为主键
- 可以使用特殊的值覆盖自动增量产生的值，只要它是尚未使用过的，而后续的增量将开始用该手工插入的值
- 为确定自动增量产生的值，可以使用**last_insert_id()**函数，其将返回该值

### 1.5 使用默认值

可以为新创建的表列设定一个默认值，这样在插入新的行时，其将具有一个默认值。
使用方法为在**NOT NULL**后加**DEFAULT value**，即使用**DEFAULT**关键字添加默认值**value**。

**注意：**

- 默认值不允许使用函数，只支持常量
- 应该使用默认值来代替允许**NULL**值

### 1.6 引擎类型

如果在创建表时省略引擎选择，则使用默认引擎。
引擎可以混用，即不同的表可以使用不同的引擎。但外键不能跨引擎使用。

**常见引擎：**

- **InnoDB**是一个可靠的事务处理引擎，它不支持全文本搜索
- **MEMORY**在功能等同于**MyISAM**，但由于数据存储在内存（不是磁盘）中，速度很快（特别适合于临时表）
- **MyISAM**是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理
