---
layout: post
author: LPF
title: 不用加减乘除做加法
date: 2017-02-25 14:55:04
updated: 2017-02-25 16:53:59
categories:
- Study
- Algorithm
- OL
---
> 写一个函数，求两个整数之和，要求在函数体内不得使用+、-、×、÷四则运算符号。

## 思路

对数字做运算，除了四则运算之外，也就只剩下位运算了。位运算是针对二进制的。对于二进制加法，也是和十进制一样，使用各位相加并加入进位而得结果的。

## 举例

$5_{10}$的二进制是$101_2$,$17_{10}$的二进制是的$10001_2$，试着把计算分成三步：

- 各位相加不计进位，得到的结果是$10100_2$
- 记下进位，此例的进位是$10_2$
- 把前两步的结果相加，得到结果$10110_2$(十进制结果为$22_{10}$)

接下来试着把二进制的加法用位运算来替代。
第一步不考虑进位对每一位相加，发现`0+0=0`、`1+1=0`、`0+1=1`、`1+0=0`，这与异或的结果是一样的。
接着考虑第二步进位，对于`0+0`、`0+1`、`1+0`都不会产生进位，只有`1+1`时才会产生进位，此时即为先做位与运算，然后再向左移动一位。
第三步把结果相加，相加的过程仍然是重复前面两步，直到不产生进位为止。

```c++
int Add(int num1, int num2)
{
    int sum, carry;
    do {
        sum = num1 ^ num2;
        carry = (num1 & num2) << 1;
        
        num1 = sum;
        num2 = carry;
    } while(num2 != 0); //if carry is not equal to zero
}
```
