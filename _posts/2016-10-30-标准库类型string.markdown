---
layout: post
author: LPF
title: 标准库类型string
date: 2016-10-30 13:32:56
updated: 2017-02-21 14:56:08
categories:
- Study
- Computer
- PL
- C++
- Class
---

## 1 概要

标准库类型*string*表示可变长的字符序列，使用*string*必须首先包含头文件*string*。
作为标准库的一部分，*string*定义在命名空间*std*中。故需要包含该命名空间方可使用该类。

## 2 定义和初始化string对象

如何初始化类的对象是由类本身决定的。
一个类可以定义很多种初始化对象的方式，只不过这些方式之间必须有所区别：

- 初始值的数量不同
- 初始值的类型不同

### 2.1 初始化string对象的方式

```cpp
#include <string>
using namespace std;//使用命名空间std
string s1;          //默认初始化，s1时一个空串
string s2(s1);      //s2是s1的副本，直接初始化
string s2 = s1;     //等价于s2(s1)，拷贝初始化
string s3("value"); //s3是字面值"value"的副本，除了字面值最后的空字符，直接初始化
string s3 = "value";//等价于s3("value")，拷贝初始化
string s4(n, 'a');   //把s4初始化为连续n个字符a组成的串
```

## 3 string对象上的操作

|       操作方式      |                                      描述                                      |
|---------------------|--------------------------------------------------------------------------------|
| ostream << s        | 将s写出到输出流ostream中，返回ostream                                          |
| istream >> s        | 从istream中读取字符串赋给s，字符串以空白分隔，返回istream                      |
| getline(istream, s) | 从istream中读取一行赋给s，返回istream，直到遇到换行符，并把换行符之前的值赋给s |
| s.empty()           | s为空返回true，否则返回false                                                   |
| s.size()            | 返回s中字符的个数                                                              |
| s[n]                | 返回s中第n个字符的引用，位置b从0计起                                           |
| s1 + s2             | 返回s1和s2连接后的结果                                                         |
| s1 = s2             | 用s2的副本代替s1中原来的字符                                                   |
| s1 == s2            | 如果s1和s2中所含的字符完全一样，则他们相等，string对象对大小写敏感             |
| s1 != s2            | 判断字符串是否不相等                                                           |
| <, <=, >, >=        | 利用字符在字典中的顺序进行比较，且对字母的大小写敏感                           |

## 4 处理string对象中的字符

为了对*string*对象中的每个字符做一些操作，可以使用**范围for(range for)**语句。
这种语句遍历给定序列中的每个元素并对序列中的每个值执行某种操作，其语法形式是：

```cpp
for(declaration : expression)
    statement
```

- *expression*部分是一个对象，用于表示一个序列
- *declaration*部分负责定义一个变量，该变量将被用于访问序列中的基础元素
- 每次迭代，*declaration*部分的变量会被初始化为*expression*部分的下一个元素值

如输出*string*对象的每一个字符：

```cpp
string str = "some string";
for(auto c : str)
    cout << c;
cout << endl;
```
