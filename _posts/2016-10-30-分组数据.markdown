---
layout: post
author: LPF
title: 分组数据
date: 2016-10-30 09:31:51
updated: 2017-02-21 15:16:14
categories:
- Study
- DataBase
- MySQL
---

## 1 数据分组

数据分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算。

## 2 创建分组

分组是在**SELECT**语句中的**GROUP BY**语句中建立的。

```SQL
SELECT ID, COUNT(*) AS numProduct
FROM products
GROUP BY ID;
```

上述例子将计算**ID**相同的行有多少，并将结果存放在**numProduct**列中。

### 2.1 GROUP BY子句规则

- 可以包含任意数目的列，这使得能对分组进行嵌套。
- 如果嵌套了分组，数据将在最后规定的分组上进行汇总，不能从个别的列取回数据。
- 被列出的每个列都必须是检索列或有效的表达式(不能是聚集函数)。如果**在SELECT**中使用表达式，则必须在**GROUP BY**子句中指定相同的表达式，且不能使用别名。
- 除聚集计算语句外，**SELECT**语句中的每个列都必须在**GROUP BY**子句中给出。
- 如果分组列中具有NULL值，则NULL将作为一个分组返回。如果存在多行NULL值，他们将分为一组。
- **GROUP BY**子句必须出现在**WHERE**子句(如果有WHERE子句)之后，**ORDER BY**子句(如果有ORDER BY子句)之前。

### 2.2 WITH ROLLUP

在**GROUP BY columns**之后使用WITH ROLLUP关键字，可以得到每个分组以及每个分组汇总级别（针对每个分组）的值。如自动对计数值进行排序等。但不能再使用ORDER BY子句进行排序了。

## 3 过滤分组

MySQL允许过滤分组，规定包括哪些分组，排除哪些分组。例如，可能想要列出至少有两个订单的所有顾客。为得出这种数据，必须基于完整的分组而不是个别的行进行过滤。 
**WHERE**语句过滤指定的是行，因此需要使用一个新的语句——**HAVING**语句来过滤分组。

### 3.1 HAVING语句

**HAVING**语句支持**WHERE**语句的所有技术和选项。

```SQL
SELECT ID, COUNT(*) AS numProduct
FROM products
WHERE price > 10
GROUP BY ID
HAVING COUNT(*) > 2;
```

上述例子中，**WHERE**语句先挑选出**price**大于7的行，然后在根据**ID**进行分组，最后由**HAVING**语句过滤出分组中计数多于2的分组。

## 4 分组和排序

### 4.1 分组和排序的区别

|     ORDER BY     |                        GROUP BY                        |
|------------------|--------------------------------------------------------|
| 排序产生的输出   | 对行分组，但输出可能不是分组的顺序                       |
| 任意列都可以使用 | 只能使用选择列或表达式列，而且必须使用每个选择表达式列 |
| 不一定需要用到   | 如果与聚集函数一起使用列或表达式，则必须使用           |
