---
layout: post
title: Cache替换算法总结
date: 2016-08-10 19:36:29
updated: 2017-02-21 16:15:48
tags:
- Principle
categories:
- Study
- Computer
- Hardware
- Advanced
---


* content
{:toc}

本文主要介绍关于Cache的一些知识点，包括存储器知识及Cache算法。




## 一、DRAM（动态随机存取存储器）和SRAM（静态随机存取存储器）

DRAM只能将数据保持很短的时间。为了保持数据，DRAM使用电容存储，所以必须隔一段时间刷新（预充电）一次，如果存储单元没有被刷新，存储的信息就会丢失（关机就会丢失数据）。 主要用于系统内存 。

SRAM是一种具有静止存取功能的内存，不需要刷新电路即能保存它内部存储的数据，速度快，但是集成度低。 主要用于CPU与主存之间的高速缓存 。



## 二、高速缓冲存储器（Cache）

Cache不像系统主存那样使用DRAM技术，而使用昂贵但较快速的SRAM技术。在计算机存储系统的层次结构中，介于中央处理器和主存储器之间的高速小容量存储器。它和主存储器一起构成一级的存储器。高速缓冲存储器和主存储器之间信息的调度和传送是由硬件自动进行的。 高速缓冲存储器最重要的技术指标是它的命中率 。Cache作为主存局部区域的副本，用来存放当前活跃的程序和数据，它利用程序运行的局部性，把局部范围的数据从主存复制到Cache中，使CPU直接高速从Cache中读取程序和数据，从而解决CPU速度和主存速度不匹配的问题。

主要由三大部分组成：

- Cache存储体：存放由主存调入的指令与数据块。

- 地址转换部件：建立目录表以实现主存地址到缓存地址的转换。

- 替换部件：在缓存已满时按一定策略进行数据块替换，并修改地址转换部件。

    CPU在Cache中找到有用的数据被称为命中，当Cache中没有CPU所需的数据时（这时称为未命中），CPU才访问内存。为了保证CPU访问时有较高的命中率，Cache中的内容应该按一定的算法替换。



## 三、Cache替换算法

当出现未命中而高速存储器对应列中没有空的位置时，便淘汰该列中的某一组以腾出位置存放新调入的组，这称为替换。确定替换的规则叫替换算法，常用的替换算法有:最近最少使用法（LRU）、先进先出法（FIFO）和随机法（RAND）等。

高速缓冲存储器 Cache 的出现使 CPU 可以不直接访问主存，而与高速 Cache 交换信息，解决了主存与 CPU 速度不匹配的问题。 Cache 的替换算法的目标是使Cache 获得更高的命中率，掌握不同的 Cache 替换算法及各自的特点可以帮助我们认识 Cache 访存的局部性原理。

在多体并行存储系统中，由于 I/O 设备向主存请求的级别高于 CPU 访存，这就出现了 CPU 等待 I/O 设备访存的现象，致使 CPU 空等一段时间，甚至可能等待几个主存周期，从而降低了 CPU 的工作效率。为了避免 CPU 与 I/O 设备争抢访存，可在CPU 与主存之间加一级缓存，这样，主存可将 CPU 要取的信息提前送至缓存，一旦主存在与 I/O 设备交换时， CPU 可直接从缓存中读取所需信息，不必空等而影响效率。

目前提出的算法可以分为以下三类（第一类是重点要掌握的）：

1. 传统替换算法及其直接演化，其代表算法有 ：

    - **LRU（ Least Recently Used）**算法：将最近最少使用的内容替换出Cache ；

    - **LFU（ Lease Frequently Used）**算法：将访问次数最少的内容替换出Cache；

    - 如果Cache中所有内容都是同一天被缓存的，则将最大的文档替换出Cache，否则按LRU算法进行替换 。

    - **FIFO(First In First Out)**：遵循先入先出原则，若当前Cache被填满，则替换最早进入Cache的那个。



2. 基于缓存内容关键特征的替换算法，其代表算法有：

    - **Size替换算法**：将最大的内容替换出Cache

    - **LRU— MIN替换算法**：该算法力图使被替换的文档个数最少。设待缓存文档的大小为S，对Cache中缓存的大小至少是S的文档，根据LRU算法进行替换；如果没有大小至少为S的对象，则从大小至少为S/2的文档中按照LRU算法进行替换；

    - **LRU—Threshold替换算法**：和LRU算法一致，只是大小超过一定阈值的文档不能被缓存；

    - **Lowest Lacency First替换算法**：将访问延迟最小的文档替换出Cache。



3. 基于代价的替换算法，该类算法使用一个代价函数对Cache中的对象进行评估，最后根据代价值的大小决定替换对象。其代表算法有：

    - **Hybrid算法**：算法对Cache中的每一个对象赋予一个效用函数，将效用最小的对象替换出Cache；

    - **Lowest Relative Value算法**：将效用值最低的对象替换出Cache；

    - **Least Normalized Cost Replacement（LCNR）算法**：该算法使用一个关于文档访问频次、传输时间和大小的推理函数来确定替换文档；

    - Bolot等人 提出了一种基于文档传输时间代价、大小、和上次访问时间的权重推理函数来确定文档替换；

    - **Size—Adjust LRU（SLRU）算法**：对缓存的对象按代价与大小的比率进行排序，并选取比率最小的对象进行替换。





## ﻿四、Cache更新策略

1. **写直达法**
        CPU在执行写操作时，必须把数据同时写入Cache和主存。当某一块需要替换时，也不必把这一块写回到主存中，新调入的块可以可以立即把在Cache的这一块覆盖。
        这种方法实现简单，而且能随时保持主存数据的正确性，但可能增加多次不必要的主存写入，降低存取速度。

2. **写回法**
        CPU在执行写操作时，被写数据只写入Cache，不写入主存。仅当需要替换时，才把已经修改过的Cache块写回到主存。
        采用这种方法时需要一个标志位，来标记一个块中的任一单元是否被修改。若被修改，则标志位置1。在需要替换掉这一块时，如果标志位为1，则必须先把这一块写回到主存中，然后才能调入新的块；否则则不必写回主存。
        这种方法操作速度快，但因主存中的字块未及时修改而有可能出错。