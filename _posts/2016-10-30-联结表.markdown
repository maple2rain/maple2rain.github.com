---
layout: post
author: LPF
title: 联结表
date: 2016-10-30 09:33:48
updated: 2017-02-21 15:16:32
categories:
- Study
- DataBase
- MySQL
---

## 1 联结

### 1.1 关系表

关系表指的是，为避免在同一个表内存有太多的相关信息(如在一个product表中可能只有几个供应商，那么供应商的一些相关信息可能就会重复的出现在表中了)，故而将有关系的两个列独立开来，并将其相互关联起来。
关系表的设计就是要保证把信息分解成多个表，一类数据一个表，各个表通过某些常用的值互相关联。

### 1.2 外键

外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。
一般设置主表的外键关联副表的主键。

### 1.3 可伸缩性

设计良好的数据库能够适应不断增加的工作量而不失败。

### 1.4 为什么使用联结

当把数据存储在多个表中时，便很难使用单条**SELECT**语句来检索出数据了。
使用特殊的语法，可以联结多个表返回一组输出，联结在运行时关联表中正确的行。

### 1.5 维护引用完整性

联结并不是物理试题，它在实际的数据库表中不存在，是根据需要建立，存在于查询的执行当中。
在使用关系表时，尽在关系列中插入合法的数据非常重要，即不能随便插入没有任何关联的非法值。

## 2 创建联结

```SQL
SELECT vend_name, prod_name, prod_price
FROM vendors, products
WHERE vendors.vend_id = products.vend_id
ORDER BY vend_name, prod_name;
```

上述例子中，**SELECT**语句与前面所有语句一样指定要检索的列。这里，最大的差别是所指定的两个列（*prod_name*和*prod_price*）在一个表中，而另一个列（*vend_name*）在另一个表中。
**FROM**语句列出的是两个表的名字，即两个被联结的表。而**WHERE**语句指定完全限定列名来匹配主键和外键。

### 2.1 笛卡尔积

由没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。相应的笛卡儿积不是想要的结果。

## 3 内部联结

目前为止所用的联结称为等值联结（equijoin），它基于两个表之间的相等测试。这种联结也称为内部联结。也可以换用**INNER JOIN...ON**子句来达到和**WHERE**子句相同的效果。

```SQL
SELECT vend_name, prod_name, prod_price
FROM vendors INNER JOIN products
ON vendors.vend_id = products.vend_id
ORDER BY vend_name, prod_name;
```

这个例子将达到和上述例子同样的效果，此时使用*vendors* **INNER JOIN** *products*的方式连联结*vendors*和*products*表。

**并且，推荐首选用这种明显的方式来进行联结，这样保证不会弄错联结条件。**
**而且，使用联结可以代替嵌套子查询。**

## 4 高级联结

### 4.1 使用表别名

别名除了用于列名和计算字段外，还可以用于给表名起别名。这样做有两个理由：

- 缩短SQL语句
- 允许在单条**SELECT**语句中多次使用相同的表。

### 4.2 例子

```SQL
SELECT ID, Language
FROM city AS C, countrylanguage AS CO
WHERE C.CountryCode = CO.CountryCode
Order BY ID;
```

上述例子将*C*当做**city**的别名，*CO*当做**countrylanguage**的别名，这样写能省写表名。

- 注意

    表别名只在查询执行中使用，与列别名不一样，表别名不返回到客户机。

## 5 不同类型的联结

### 5.1 自联结

自联结用于在查询中需要查询的两个表实际上是相同的表。
在这种情况下，需要查询具有跟某个已知行值相关的其他行值的信息，此时会先在表中搜索这个已知行值的一个主键，再根据这个主键来获得其他行值。这样就需要两次查询同一张表。
尽管查询同一张表是合法的，但这会对这个表的引用造成二义性，因为MySQL不知道被引用的是哪个实例。
为此，需要为这个表起两个表别名，如下所示：

```SQL
SELECT p1.proID, p1.proName 
FROM products AS p1, products AS p2
WHERE p1.vendID = p2.vendID
    AND p2.proID = 'value';
```

上述例子将**products**分别起两个别名*p1*和*p2*，首先使用*p1*前缀明确给出所需列的全名，然后**WHERE**语句联结两个表，再按照*p2*的**proID**进行过滤，返回所需的数据。

#### 5.1.1 用自联结而不用子查询

自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终的结果是相同的，但有时候处理联结远比处理子查询快得多。应该试一下两种方法，以确定哪一种的性能更好。

### 5.2 自然联结

无论何时对表进行联结，应该至少有一个列出现在不止一个表中（被联结的列）。标准的联结返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。
为了实现返回的列不重复，可以通过对某个表使用通配符*，对其他所有表的列使用明确的子集来完成，如：

```SQL
SELECT c.*, p1.proID, p1.proName , p2.address
FROM costomers AS c, products AS p1, producu AS p2
WHERE p1.vendID = c.vendID
    AND p2.proID = p1.proID;
```

在这个例子中，通配符只对第一个表使用，所有其他列明确列出，所以没有重复的列被检索出来。
自然联结关键字为**natural**。
如下是另外一个例子：
```SQL
SELECT vendors.*, prod_name, prod_price
FROM vendors NATURAL INNER JOIN products
ON vendors.vend_id = products.vend_id
ORDER BY vend_name, prod_name;
```
此时，生成的表中将不会有相同的元组。

### 5.3 外部联结

如果联结包含了相关表中没有关联行的行，则称其为外部联结。
外部联结使用关键字**OUTER JOIN**

```SQL
SELECT city.ID, countrylanguage.CountryCode
FROM city LEFT OUTER JOIN countrylanguage
    ON city.CountryCode = countrylanguage.CountryCOde
ORDER BY city.ID;
```

上述例子进行左外联结，将不仅从**city**表中选出匹配**CountryCode**的行，也选出不匹配的行。至于选择哪个表，则由**LEFT**(表示选择左表)和**RIGHT**(表示选择右表)关键字来决定。

如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表列均为空值。同样，如果右表的某行在左表中没有匹配行，则将为左表返回空值。

## 6 全外联结

**全外联结(full outer join)** 类型是左外联结与右外联结的组合。
在内联结的结果被计算出来后，左侧关系中不匹配右侧关系任何元组的元组被填上空值并加到结果关系中。
同样，右侧关系中不匹配左侧关系任何元组的元组也被填上空值并加到结果关系中。







