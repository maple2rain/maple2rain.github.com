---
layout: post
author: LPF
title: 输入输出
date: 2017-01-05 17:00:59
updated: 2017-01-05 17:03:16
tags:
- Linux Shell
categories:
- Study
- Computer
- OS
- Linux
- API
- Shell
- User Input
---
## 1 标准文件描述符

**Linux**系统将每个对象当做文件来处理，这包括输入和输出的过程。
**Linux**用**文件描述符**来标识每个文件对象，后者会唯一地标识会话中打开的文件。

| 文件描述符 | 缩 写  |  描 述   |
|------------|--------|----------|
|          0 | STDIN  | 标准输入 |
|          1 | STDOUT | 标准输出 |
|          2 | STDERR | 标准错误 |

## 2 重定向错误

默认情况下，**STDOUT**与**STERR**文件描述符会指向同样的地方，如都把消息输出到显示器输出中，不过也可以将其输出到其他地方。

### 2.1 只重定向错误

已知**STDERR**文件描述符被设成2，因此可以将文件描述符放在重定向符号前，将该文件描述符指定到不同输出上：

```bash
$ ls -al noSuchFile 2> test.log
$ cat test.log
```

上述例子中，运行第一条命令时，错误消息不会出现在屏幕上，因为已经将其重定向到**test.log**了，浏览*8test.log**时则可以看到错误信息。

### 2.2 重定向错误和数据

如果想重定向错误和正常输出，可以使用两个重定向符号，并将其输出到对应的输出文件中：

```bash
$ ls -al fileExist noSuchFile 1> test1.log 2> test2.log
$ cat test1.log
$ cat test2.log
```

上述例子中，将把本该输出到**STDOUT**的正常输出通过**1>**重定向到了**test1.log**，把本该输出到**STDERR**的错误消息通过**2>**重定向到了**test2.log**。

如果想将**STDERR**和**STDOUT**同时重定向到同一个文件，可以使用特殊的重定向符号**&>**：

```bash
$ ls -al fileExist noSuchFile 2> test.log
$ cat test.log
```

当用该符号时，命令生成的所有输出都会发送到同一位置，如上例中的**test.log**。
此时**shell**会自动给错误消息分配较高的优先级，使其输出到文件较前面处。

## 3 脚本重定向输出

### 3.1 临时重定向

如果要生成错误消息时，可以在文件描述符数字之前加**&**符号以创建临时重定向。

- 脚本

    ```sh
    echo "This is an error" >&2
    ```

- shell

    ```bash
    $ ./test.sh 2> test.log
    ```

上述例子中，命令行输入没有指定重定向到**test.log**时，则脚本仍会在屏幕上显示输出。
但在指定来输出到**test.log**之后，输出便会重定向到该文件中了。

### 3.2 永久重定向

使用**exec**命令告诉**shell**在脚本执行期间重定向某个特定文件描述符：

```sh
exec 1>normal.log
exec 2>error.log
```

上述命令分别将**STDOUT**及**STDERR**重定向到**normal.log**及**error.log**。

## 4 脚本重定向输入

同样，使用**exec**命令可以将**STDIN**重定向到文件中：

```sh
exec 0< file
```

这个命令将会告诉**shell**他会从文件**file**中获得输入。

## 5 创建自己的重定向

**shell**最多可以有9个打开的文件描述符，其他6个文件描述符是**3~8**，并且当做输入或输出重定向都行。
可以将这些文件描述符中的任意一个分配给文件，并在脚本中使用它们。

### 5.1 创建输出文件描述符

```sh
exec 3>test.log
echo "This is to be in the test.log" >&3
```

这个脚本用**exec**命令将文件描述符3重定向到文件**test.log**中。

### 5.2 重定向文件描述符

可以先将一个文件描述符跟配给标准文件描述符，然后及可以将标准重定向到另一个文件文件描述符，再利用之前分配的文件描述符，使标准文件描述符返回其最初的作用。

```sh
exec 3>&1
exec 1>test.log
exec 1>&3
```

上述例子中，脚本先将文件描述符3重定向到文件描述符1的当前位置，即**STDOUT**，再将**STDOUT**重定向到文件**test.log**上，但此时文件描述符3仍然指向**STDOUT**之前的位置；
之后又将**STDOUT**重定向到文件描述符3，即**STDOUT**又指向他原来的位置了。

按照同样的逻辑，也可以重定向输入。

## 6 记录消息

使用**tee**命令可以将**STDIN**中的数据重定向，可以用它和管道命令一起将任何命令的输出重定向。

```bash
date | tee test.log
```

上述输出会出现在**STDOUT**中，也会写入到指定文件中。

默认情况下，**tee**命令使用时会覆盖文件内容；如果要追加内容，需使用**-a**参数。