---
layout: post
author: LPF
title: 全文本搜索
date: 2016-10-30 09:34:08
updated: 2017-02-21 15:16:36
categories:
- Study
- DataBase
- MySQL
---

## 1 启用全文本搜索支持

文本搜索主要应用于查找特定的文本内容，而普通的通配符和正则表达式匹配很难明确控制，且搜索效率较低(在表非常大的时候)，因此可以使用引擎提供的文本搜索功能来进行搜索，其还可以智能化，即找出相关性词语。
一般在创建表时启用全文本搜索，通过在**CREATE TABLE**语句中使用**FULLTEXT**子句实现。

```SQL
CREATE TABLE productNotes
(
    noteID      int         NOT NULL AUTO_INCREMENT,
    prodID      char(10)    NOT NULL,
    noteText    text        NULL,
    PRIMARY KEY(noteID),
    FULLTEXT(noteText)      #指定nodeText列进行全文本搜索
)ENGINE = MyISAM;           #使用MyISAM引擎
```

在上述例子中，**FULLTEXT**索引单个列，如果需要也可以指定多个列。
在定义之后，MySQL自动维护该索引，在增加、更新或删除行时，索引随之自动更新。

### 1.1 不要在导入数据时使用FULLTEXT

更新索引要花时间，虽然不是很多，但毕竟要花时间。
如果正在导入数据到一个新表，此时不应该启用FULLTEXT索引。应该首先导入所有数据，然后再修改表，定义FULLTEXT。
这样有助于更快地导入数据（而且使索引数据的总时间小于在导入每行时分别进行索引所需的总时间）。 

## 2 进行全文本搜索

索引时，在**WHERE**子句中使用两个函数**Match**和**Against**执行全文本搜索(默认不区分大小写)。
如不在**WHERE**子句中使用，则返回所有行。

- Match
    + 指定被搜索的列
    + 传递给Match的值必须与FULLTEXT定义中的相同
    + 指定多个列时，则按照正确的次序列出它们

- Against
    + 指定要使用的搜索表达式

### 2.1 例子

```SQL
SELECT nodeText
From productNotes
WHERE Match(nodeText) Against('rabbit');    #在nodeText中选出包含字符串rabbit的行
```

### 2.2 排序

全文本搜索的一个重要部分就是会对结果进行排序，具有较高等级的行先返回。
等级由**MySQL**根据行中词的数目、唯一词的数目、整个索引中词的总数以及包含该词的行的数目计算出来。
不包含搜索词的等级为0，匹配越精准，搜索词越靠前的等级越高，然后文本搜索再按降序对行进行排序后返回行。

## 3 查询扩展

查询扩展用来设法放宽所返回的全文本搜索结果的范围。

使用查询扩展时，MySQL对数据和索引进行两遍扫描来完成搜索：

- 首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行
- 其次，MySQL检查这些匹配行并选择所有有用的词
- 再其次，MySQL再次进行全文本搜索，这次不仅使用原来的条件，而且还使用所有有用的词。

### 3.1 使用查询扩展

在Against函数中，在表达式后面接**WITH QUERY EXPANSION**。

```SQL
SELECT nodeText
From productNotes
WHERE Match(nodeText) Against('rabbit' WITH QUERY EXPANSION);    #在nodeText中选出与字符串rabbit有相关内容的行
```

## 4 布尔文本搜索

布尔方式(**boolean mode**)可提供关于如下内容的细节：

- 要匹配的值
- 要排斥的值
- 排列提示
- 表达式分组
- 其他内容

### 4.1 无需指定FULLTEXT

布尔方式不同于迄今为止使用的全文本搜索语法的地方在于，即使没有定义FULLTEXT索引，也可以使用它。
但这是一种非常缓慢的操作其性能将随着数据量的增加而降低。
不过，布尔方式不按等级值降序排序返回的行。

### 4.2 全文本布尔操作符

| 操作符 |                            说明                            |
|--------|------------------------------------------------------------|
| +      | 包含，词必须存在                                           |
| -      | 排除，词必须不出现                                         |
| >      | 包含，且增加等级值                                         |
| <      | 包含，且减少等级值                                         |
| ()     | 把词组成子表达式，允许这些子表达式作为一个组被包含、排除等 |
| ~      | 取消一个词的排序值                                         |
| *      | 词尾通配符                                                 |
| ""     | 定义一个短语                                               |

### 4.3 例子

```SQL
SELECT nodeText
From productNotes
WHERE Match(nodeText) Against('+(<rabbit) -heavy "red apple"' IN BOOLEAN MODE);    #使用布尔方式在nodeText中选出包含字符串rabbit(并降低其等级),red apple而不包含heavy的行
```

## 5 使用说明

- 在索引全文本数据时，短词被忽略且从索引中排除。短词定义为那些具有3个或3个以下字符的词(如果需要，这个数目可以更改)。
- **MySQL**带有一个内建的非用词(**stopword**)列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表(请参阅**MySQL**文档以了解如何完成此工作)。 
- 许多词出现的频率很高，搜索它们没有用处(返回太多的结果)。因此，**MySQL**规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则不用于**IN BOOLEAN MODE**。 
- 如果表中的行数少于3行，则全文本搜索不返回结果(因为每个词或者不出现，或者至少出现在50%的行中)。 
- 忽略词中的单引号。例如，**don't**索引为**dont**。
- 不具有词分隔符(包括日语和汉语)的语言不能恰当地返回全文本搜索结果。
- 仅在**MyISAM**数据库引擎中支持全文本搜索。

