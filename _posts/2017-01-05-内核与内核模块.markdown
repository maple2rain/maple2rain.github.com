---
layout: post
author: LPF
title: 内核与内核模块
date: 2017-01-05 17:27:12
updated: 2017-01-05 17:28:41
tags:
- Kernel
categories:
- Study
- Computer
- OS
- Linux
- Kernel
---
在整个Linux启动过程中，内核(kernel)负责驱动主机的硬件配备。
内核一般都是压缩文件，因此在使用内核之前，应先将其解压缩后加载进内存当中。
内核主要负责以下四项功能：

- 系统内存管理
- 软件程序管理
- 硬件设备管理
- 文件系统管理

## 1 内核放置位置
|          名称         |               位置或文件名               |
|-----------------------|------------------------------------------|
| 内核                  | /boot/vmlinuz 或 /boot/vmlinuz-version   |
| 内核解压缩所需RAMDisk | /boot/initrd 或 /boot/initrd-version     |
| 内核模块              | /lib/modules/$(uname -r)/kernel          |
| 内核源码              | /usr/src/kernels(默认不安装，需自动下载) |
| 内核版本              | /proc/version                            |
| 系统内核功能          | /proc/sys/kernel                         |

## 2 内核模块依赖性
内核模块之间是具有相关依赖性的，且分为很多个部分，因此要手工定义他们的依赖性是很麻烦的。但Linux提供了一些模块依赖性的解决方案，其记载于**/lib/modules/$(uname -r)/modules.dep**中。
欲创建该文件，只需使用**depmod**命令即可
`depmod [-Ane]`

| 选项 |                                                                                            说明                                                                                           |
|------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| -A   | 不加任何参数时，**depmod**主动去分析目前内核模块，并重新磁写入**modules.dep**文件中<br>若加入**-A**选项，则**depmod**会查找比**modules.dep**还要新的模块，真的找到后才会更新**modules.dep** |
| -n   | 不写入**modules.dep**，而是将结果输出到屏幕上                                                                                                                                             |
| -e   | 显示出目前已加载                                                      的不可执行的模块名称                                                                                                |

## 3 内核模块的查看
### 3.1 查看已经加载的模块
使用以下命令即可查看当前内核已经加载了的模块
`lsmod`
其显示的内容包含：

- 模块名称(Module) 
- 模块的大小(size)
- 模块被哪个模块所使用(Used by)

### 3.2 查看模块信息
欲查看模块的信息，可使用**modinfo**命令来查看
`modinfo [-adln] [module | file]`

| 选项 |          说明          |
|------|------------------------|
| -a   | 仅列出作者名称         |
| -d   | 仅列出该模块的说明     |
| -l   | 仅列出授权(license)    |
| -n   | 仅列出该模块的详细路径 |

## 4 模块的加载与删除
### 4.1 用户自主加载完整模块
用户可以不主动分析模块的相互依赖性而去加载一个完整的模块。但前提是模块必须是**完整**的文件名。
`insmod [/path/module_name]`

### 4.2 删除模块
删除模块只需使用**rmmod**命令即可
`rmmod [-fw] module`

| 选项 |                       说明                       |
|------|--------------------------------------------------|
| -f   | 强制将该模块删除掉，不论是否正在使用             |
| -w   | 若该模块正在使用，则会等待到其使用完毕后才删除它 |

### 4.3 自动处理模块
使用**modprobe**命令可以解决一些模块依赖性从而方便管理模块
`modprobe [-lcfr] module`

|  选项  |                                  说明                                 |
|--------|-----------------------------------------------------------------------|
| -c     | 列出当前系统所有的模块                                                |
| -l     | 列出目前在**/lib/modules/$(uname -r)/kernel**当中所有模块的完整文件名 |
| -f     | 强制加载该模块                                                        |
| -r     | 删除某个模块                                                          |
| 无选项 | 加载某个模块                                                                      |

## 5 额外参数设置
可以进入到**/etc/modprobe.conf**文件中设置额外的参数。