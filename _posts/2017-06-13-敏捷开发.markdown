---
layout: post
author: LPF
title: 敏捷开发
date: 2017-06-13 22:53:54
updated: 2017-06-21 17:43:20
tags:
- Thinking
categories:
- Life
- Thinking
---
# 敏捷开发

敏捷开发就是在一个高度协作的环境中，不断地使用反馈进行自我调整和完善。

1. 开发需持续不断，切勿时续时断
1. 持续注入能量
1. 先难后易

# 态度决定一切

选定了要走的路，就是选定了它通往的目的地。

1. 指责不能修复bug，把矛头对准解决问题的办法，而不是人
1. 不要孤立地进行编码，要有团队成员进行代码复审，而这也能发现bug的存在
1. 不要坠入快速的简单修复中，要投入时间和精力保持代码的整洁、敞亮，修改代码前要很好地理解它
1. 对事不对人，稍加注意礼貌待人，都会有益于整个团队关注真正有价值的问题
1. 做正确的事情，要有勇气去说出实情

# 学无止境

即使你已经再正确的轨道上，但如果只是停止不前，也仍然会被淘汰出局。

1. 跟踪技术变化，不需要精通所有，但要清楚行业的动向，从而规划自己的项目和职业生涯
1. 在学习一门新技术的时候，要丢弃阻止你前进的旧习惯
1. 不能只满足于别人告诉你的表面现象，要不停地提问直到你明白问题的根源；同时，想好提出这个问题的理由
1. 把握开发节奏，运用有规律的开发节奏，会更容易达到目标，并确保项目不停地前进

# 交付用户想要的软件

没有任何计划在遇敌后还能继续执行，敌人就是变化。

1. 业务方面应让客户参与做决定。用业务负责人能够理解的语言，向他们解释遇到的问题，并让他们做决定
1. 设计指引你向正确的地方前进，而不是具体标识你如何行进；好的设计应该是正确的，而不是精确的
1. 根据需要选择使用的技术和工具
1. 保持你的项目时刻可以发布，保证你的系统随时可以编译、运行、测试并立即部署
1. 提早集成各个模块代码，持续而有规律，才能提前发现问题
1. 开发的时候，要保持应用可见，每隔一周或两周(时间灵活处置)，邀请所有的客户，向他们演示最新完成的功能，积极获得他们的反馈
1. 增量开发短期迭代让人感觉到非常专注且有效率，可以看到一个实际并且确切的目标

# 敏捷反馈

纵有千万专家意见，也需一步切实执行。

1. 使用自动化的单元测试，好的单元测试能够为代码问题提供及时的警报
1. 以**测试驱动开发**作为设计工具，将会带来更简单更实效的设计
1. 不同的环境就有不同的问题，使用持续集成工具，在每一种需要支持的平台和环境中运行单元测试
1. 真正度量剩余工作量，不要使用不恰当的度量(如剩下10%的工作量)来欺骗自己，要评估待办事项并为其排列优先级
1. 每一个抱怨的背后都隐藏了一个事实，找出真相，修复真正的问题
1. 没有愚蠢的客户，只有自大的开发人员

# 敏捷编码

1. 无论何事，你愿意别人如何待你，你也应如何待人
1. 代码应意图清晰，表达明确，可读性高于执行效率(编译器可能做更好地优化)
1. 使用细心选择的、有意义的命名，用注释描述代码意图和约束，但仍要让代码作为最主要的沟通工具，让人见码知意，注释只是补充，说明为什么这么写代码
1. 动态地评估权衡，当不知道何种因素更重要时，咨询利益相关者——客户
1. 在很短的编辑/构建/测试循环中编写代码，要比长时间编码要好得多，且可以创建更加清晰、简单、易于维护的代码
1. 不要允许查询改变对象的状态，尽可能将查询和命令分开

# 敏捷调试

1. 记录解决问题的日志
    1. 问题发生日期
    1. 问题简述
    1. 解决方案详细描述
    1. 引用文章或网址，以提供更多细节或相关信息
    1. 任何代码片段、设置或对话框的截屏，只要他们是解决方案的一部分，或者可以帮助更深入地理解相关细节
1. 警告就像是一个不定时炸弹，随时都有可能爆发，因此要尽量消除他；如提示有某几个变量未使用，那么可能有几个变量被错误使用了
1. 对问题要各个击破，在解决问题时，要将问题域与其周边隔离开，特别是在大型应用中
1. 处理或是向上传播所有异常，不要将他们压制不管，临时这样处理可能会遗忘，以致于在后期导致更大更难以解决的问题
1. 提供有用的错误提示信息，如**无法打开/usr/local/setting.xml以供读取**而不是**无法找到文件**

# 敏捷协作

1. 定期安排会面时间(立式会议)
    1. 昨天有什么收获
    1. 今天计划要做哪些工作
    1. 面临着哪些障碍
1. 强调代码的集体所有制，团队中应该有几个成员可以修复某处的bug，太过依赖某个人会增加团队的风险
1. 让开发人员轮换完成系统不同领域中不同模块的不同任务(但不是每个部分都可以采取此种做法，如需要某些特定的知识或对特定领域问题需要了解时，人多反而会误事)
1. 分享自己的知识同样可以有收获，所谓教学相长
1. 指引别人正确的方向，而不是直接提供解决方法，每个人都能从中学到不少东西
1. 准备好后再共享代码，绝不要提交尚未完成的代码
1. 代码复查(其他人查看代码并作出反馈)可以大大提升代码质量和降低错误率
1. 及时通报进展与问题，发布进展状况、新的想法和目前正在关注的主题，不要等着别人来问项目状态如何

# Reference

[1] Subramaniam,V. Hunt,A. 高效程序员的45个习惯:敏捷开发修炼之道(修订版)[M]. 钱安川,郑柯,译. 北京:人民邮电出版社, 2014.10:1-169.