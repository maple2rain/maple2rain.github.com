title: 系统调用底层函数
date: 2016-10-30 16:10:45
updated: 2017-02-21 15:12:36
tags:
- LinuxAPI
categories:
- Study
- Computer
- OS
- Linux
- API
- Environment
---


## 1 访问设备驱动程序的底层函数

| 函数名 |             说明             |
|--------|------------------------------|
| open   | 打开文件或设备               |
| read   | 从打开的文件或设备里读数据   |
| write  | 向文件或设备写数据           |
| close  | 关闭文件或设备               |
| ioctl  | 把控制信息传递给设备驱动程序 |
|        |                              |

## 2 ioctl

为了向用户提供一个一致的接口，设备驱动程序封装了所有与硬件相关的特性。
硬件的特有功能可通过**ioctl(I/O控制)**系统调用来提供

系统调用**ioctl**用于提供一些与特定硬件设备有关的必要控制，所以他的用法随设备的不同而不同。**ioctl**不需要具备可移植性，每个驱动程序都定义了它自己的一组**ioctl**命令。

## 3 底层文件访问

### 3.1 write系统调用

系统调用**write**的作用是，把缓冲区**buf**的前**nbytes**个字节写入与文件描述符**fildes**关联的文件中。
它返回实际写入的字节数。
如果文件描述符有错或底层的设备驱动程序对数据块长度比较敏感，该返回值可能会小于**nbytes**。
如果函数返回0，就表示未写入任何数据；如果返回-1，表示在**write**调用中出现了错误，错误代码保存在全局变量**errno**里。

- 函数原型

    ```c
    /**
     * fildes:文件描述符
     * buf   :缓冲区
     * nbytes:写入的字节数
     * 返回值:实际写入的字节数
     * 头文件:unistd.h
     */
    size_t write(int fildes, const void *buf, size_t nbytes);
    ```

### 3.2 read系统调用

系统调用**read**的作用是，从与文件描述符**fildes**相关联的文件里读入**nbytes**个字节的数据，并把他们放到数据去**buf**中。
它返回实际读入的字节数，可能会小于请求的字节数。
如果**read**调用返回0，表示未读入任何数据，已到达了文件尾；如果返回-1，表示调用出现了错误。

- 函数原型

    ```c
    /**
     * fildes:文件描述符
     * buf   :保存数据区
     * nbytes:读入的字节数
     * 返回值:实际读入的字节数
     * 头文件:unistd.h
     */
    size_t read(int fildes, const void *buf, size_t nbytes);
    ```

### 3.3 open系统调用

系统调用**open**可以创建新的文件描述符。
**open**建立了一条到文件或设备的访问路径。
如果调用成功，它将返回一个可以被read、write和其他系统调用使用的文件描述符。这个描述符是唯一的，不会与任何其他运行中的进程共享。
如果两个程序同时打开同一个文件，它们会得到两个不同的文件描述符。如果其都对文件进行写操作，那么它们会各写个的，并分别接着上次离开的位置继续往下写。**它们的数据不会交织在一起，而是彼此互相覆盖。**两个程序对文件的读写偏移值不同，可以使用文件锁功能防止出现冲突。

- 函数原型

    ```c
    /**
     * path     :准备打开的文件或设备名
     * oflags   :指定打开文件所采取的动作
     * mode     :访问权限的初始值
     * 头文件   :fcntl.h(sys/types.h,sys/stat.h)
     */
    int open(const char *path*, int oflags);
    int open(const char *path*, int oflags, mode_t mode);
    ```

- oflags可选参数

    可以是下列模式的**按位或**取得。

    |   模式   |                      说明                      |
    |----------|------------------------------------------------|
    | O_RDONLY | 以只读方式打开                                 |
    | O_WRONLY | 以只写方式打开                                 |
    | O_RDWR   | 以读写方式打开                                 |
    | O_APPEND | 把数据追加在文件末尾                           |
    | O_TRUNC  | 把文件长度设置为0，丢弃已有的内容              |
    | O_CREAT  | 如果需要，就按参数mode中给出的访问模式创建文件 |
    | O_EXCL   | 与O_CREAT一起使用，确保调用者创建出文件        |

- 访问权限初始值mode

    当使用带有**O_CREAT**标志的open调用来创建文件时，则必须带有**mode**参数。
    第三个参数**mode**可以是几个标志**按位或**取得，其在**sys/stat.h**中定义。

    |   标志  |         说明         |
    |---------|----------------------|
    | S_IRUSR | 读权限，文件属主     |
    | S_IWUSR | 写权限，文件属主     |
    | S_IXUSR | 执行权限，文件属主   |
    | S_IRGRP | 读权限，文件所属组   |
    | S_IWGRP | 写权限，文件所属组   |
    | S_IXGRP | 执行权限，文件所属组 |
    | S_IROTH | 读权限，其他用户     |
    | S_IWOTH | 写权限，其他用户     |
    | S_IXOTH | 执行权限，其他用户   |

    需要注意的是，这只是访问权限的初始值，其结果还需要与用户的掩码umask的反值做AND操作，结果才是最终的权限。

### 3.4 close系统调用

**close**系统调用用于终止文件描述符**fildes**与其对应文件之间的关联。
此后，文件描述符被释放并能够重新使用。
调用成功时返回0，出错返回-1。

- 函数原型

    ```c
    /**
     * fildes :文件描述符
     * 头文件 :unistd.h
     */
    int close(int fildes);
    ```

### 3.5 ioctl系统调用

**ioctl**提供了一个用于控制设备及其描述符行为和配置底层服务的接口

- 函数原型

    ```c
    /**
     * fildes :文件描述符
     * cmd    :对象执行参数
     * 头文件 :unistd.h
     */
    int ioctl(int fildes, int cmd, ...);
    ```

- 例子

    ```c
    //点亮键盘的LED灯
    ioctl(tty_fd, KDSETLED, LED_NUM | LED_CAP | LED_SCR);
    ```
### 3.6 lseek系统调用

**lseek**系统调用对文件描述符**fildes**的读写指针进行设置，可以用它来设置文件的下一个读写位置。
**lseek**返回从文件头到文件指针被设置处的字节偏移值，失败时返回-1.
参数**offset**的类型为**off_t**是一个与具体实现有关的整数类型，在**sys/types.h**中定义。

- 函数原型

    ```c
    /**
     * fildes:文件描述符
     * offset:偏移值
     * whence:定义偏移值用法
     * 返回值:偏移值
     */
    off_t lseek(int fildes, off_t offset, int whence);
    ```

    **whence**定义了偏移值的用法，如下：
    |    值    |                 描述                 |
    |----------|--------------------------------------|
    | SEEK_SET | 偏移是绝对位置                       |
    | SEEK_CUR | 偏移值是相对于当前位置的一个相对位置 |
    | SEEK_END | 偏移值是相对于文件尾的一个相对位置   |