---
layout: post
author: LPF
title: 函数
date: 2017-01-05 16:50:50
updated: 2017-01-05 17:02:20
tags:
- Linux Shell
categories:
- Study
- Computer
- OS
- Linux
- API
- Shell
- Structure  Stament
---
## 1 创建函数

### 1.1 格式

- 采用关键字**function**

    ```sh
    function name {
        commands
    }
    ```

    **name**属性定义了赋予函数的唯一名称，必须给脚本中的每个函数赋予唯一的名字。

- 编程风格

    ```sh
    name(){
        commands
    }
    ```

    函数名后的圆括号为空，表示正在定义一个函数。

## 2 使用函数

要在脚本中使用函数，只需要在某一行上指定函数名即可，但要注意函数定义要先于使用。
重定义了函数，即函数同名，新定义会覆盖原来函数的定义，而不会产生任何错误消息。

## 3 返回值

### 3.1 默认退出状态码

默认情况下，函数返回值会是函数中最后一条命令返回的退出状态码

### 3.2 使用return命令

可以使用**return**命令来退出函数并返回特定的退出状态码。
用法和编程语言风格一致。

- 带有返回值的函数

    如果使用带有返回值的函数，那么要记住两点：

    + 函数以结束就取用**$?**返回值，否则可能会被其他命令覆盖
    + 退出状态码必须在0~255之间

### 3.1 使用函数输出

可以将函数的输出保存到**shell**变量中。

```sh
dbl(){
    read -p "Enter a value :" value
    echo $[ $value * 2 ]
}

result=`dbl`
echo "The new value is $result"
```

这个函数会用**echo**语句来显示计算结果。
该脚本会捕捉**dbl**函数的输出，并将其存于**result**中。
**shell**会自动地不将<font color=red>echo $[ $value * 2 ]</font>作为输出。
通过这种方法，可以达到读取字符串、浮点数及范围不在0~255的整数值。

## 4 函数使用变量

## 4.1 传递参数

- 格式
    
    ```sh
    functionName value1 value2 ...
    ```

    直接将参数和函数放在同一行即可。

- 使用**$#**判断传入函数的参数数目
- 使用**$1**、**$2**等来使用参数

### 4.2 全局变量

**全局变量**是在**shell**脚本中任何地方都有效的变量，不管是在函数或是在脚本主体定义。

### 4.3 局部变量

函数内部变量可以被声明为局部变量，不过要使用**local**关键字。
此时，变量的使用将仅限于函数中。
如果脚本中在该函数外有同样名字的变量，那么**shell**会保证这两个变量的值是分离的。

### 4.4 数组变量

数组定义的方式为：

```sh
array=(val1 val2 val3 ...)
```

使用数组的方式为：

```sh
#将数组的第num个元素赋值给val
val=${array[num]}
```

函数中使用数组赋值给新的数组：

```sh
newArray=(`echo "$@"`)
```

函数传入数组：

```sh
#创建数组
array=(val1 val2 val3 ...)
#复制数组
arg=`echo ${array[*]}`
#数组传递
funtion $arg
```

函数返回数组：

```sh
echo ${array[*]}
```

## 5 创建函数库

创建函数库文件之后，在使用时可以使用**source**命令来在当前**shell**上下文执行命令，运行脚本文件，从而可以使用库。

```sh
. ./myFuns
```

假定**shell**脚本与库文件在同一目录，则可以使用**source**命令来使用该库，上例中的**点操作符**是**source**命令的快捷别名。
