---
layout: post
author: LPF
title: Select子句
date: 2016-10-30 09:30:53
updated: 2017-02-21 15:16:03
categories:
- Study
- DataBase
- MySQL
---

## 1 排序检索数据

### 1.1 排序单个列
排序检索时需要用到**SELECT**语句的**ORDER BY**子句。

```SQL
SELECT id 
FROM someTable
ORDER BY id;
```

上述的例子对*id*以数字大小顺序进行排序。

- 通过非选择列进行排序
    
    上述的例子**ORDER BY**子句选用的排序列是检索的列，但实际上可以用非检索的列来进行排序数据，如对**name**列以**age**排序。

### 1.2 排序多个列 

为了按多个列进行，只要指定列名，列名之间用逗号分开即可。
另外，还可对这多个列按多个选项排序，如先对序号排序，再对名字排序，这样的目的是为了给具有同样序号的行进行排序。

```SQL
SELECT id, name, birthday 
FROM someTable
ORDER BY id, name;
```

上述的例子对三个列**id, name, birthday**进行排序，首先按*id*列排序，然后按照*name*排序。

### 1.3 指定排序方向

数据排序不限于升序排序（从A到Z）。这只是默认的排序顺序，还可以使用**ORDER BY**子句以降序（从Z到A）顺序排序。为了进行降序排序，必须指定**DESC**关键字。

```SQL
SELECT id 
FROM someTable
ORDER BY id DESC;
```

上述的例子对*id*以数字大小顺序进行降序排序。

如果要对多个列进行排序时，则将关键字**DESC**放在该列名的后方，如

```SQL
SELECT id, name, birthday 
FROM someTable
ORDER BY id DESC, name;
```

此时，DESC关键字只应用到位于其前面的列名，如上述例子中，只对*id*降序处理，对*name*以升序处理。若想对多个列进行降序排序，则对每个列都要指定**DESC**关键字。

### 1.4 ORDER BY子句位置
在给出**ORDER BY**子句时，应该保证它位于FROM子句之后。如果使用**LIMIT**，它必须位于**ORDER BY**之后。使用子句的次序不对将产生错误消息。

-------

## 2 过滤数据

数据库表一般包含大量的数据，很少需要检索表中所有行。通常只会根据特定操作或报告的需要提取表数据的子集。只检索所需数据需要指定搜索条件（search criteria），搜索条件也称为过滤条件（filter condition）。 

### 2.1 使用where子句

在SELECT语句中，数据根据WHERE子句中指定的搜索条件进行过滤。WHERE子句在表名（FROM子句）之后给出，如下所示：

```SQL
SELECT id, name, birthday 
FROM someTable
WHERE id = 2
ORDER BY id;
```

上述例子显示了在表中搜索**id = 2**的行的用法。

- WHERE子句的位置
    
    在同时使用ORDER BY和WHERE子句时，应该让ORDER BY位于WHERE之后，否则将会产生错误。

### 2.2 WHERE子句操作符

| 操作符  |        说明        |
|---------|--------------------|
| =       | 等于               |
| <>      | 不等于             |
| !=      | 不等于             |
| <       | 小于               |
| <=      | 小于等于           |
| >       | 大于               |
| \>=      | 大于等于           |
| BETWEEN | 在指定的两个值之间 |

#### 2.2.1 AND操作符

为了通过布置一个列进行过滤，可使用AND操作符给WHERE子句附加条件。

```SQL
SELECT id, name, birthday 
FROM someTable
WHERE id >= 2 AND birthday > MON;
```

上述例子将检索出**id >= 2**且**birthday > MON**的行。
当添加多个过滤条件时，每添加一条就要使用一个**AND**。

- BETWEEN

    **BETWEEN**操作符需要**AND**操作符的搭配，来指定所需范围的开始值和结束值。**BETWEEN**匹配范围中所有的值，包括指定的开始值和结束值。如，
    ```SQL
    SELECT id, name, birthday 
    FROM someTable
    WHERE id BEWTEEN 10 AND 20;
    ```

#### 2.2.2 OR操作符

OR操作符与AND操作符不同，它指示MySQL检索匹配任一条件的行。

```SQL
SELECT id, name, birthday 
FROM someTable
WHERE id >= 2 OR birthday > MON;
```

上述例子将检索出**id >= 2**或**birthday > MON**的行。
当添加多个过滤条件时，每添加一条就要使用一个**OR**。

- 注意

    当**AND**与**OR**操作符同时存在时，**AND**操作符会与较高的优先级。

#### 2.2.3 IN操作符

圆括号在**WHERE**子句中还有另外一种用法。**IN**操作符用来指定条件范围，范围中的每个条件都可以进行匹配。**IN**取合法值的由逗号分隔的清单，全都括在圆括号中。如，
```SQL
SELECT id, name, birthday 
FROM someTable
WHERE id IN (10, 20);
```

上述例子将检索出**id = 10**或**id = 20**的行。其效果与**OR**操作符一致

- 为什么要使用IN操作符？其优点具体如下。 
    + 在使用长的合法选项清单时，IN操作符的语法更清楚且更直观。 
    + 在使用IN时，计算的次序更容易管理（因为使用的操作符更少）。 
    + IN操作符一般比OR操作符清单执行更快。 
    + IN的最大优点是可以包含其他SELECT语句，使得能够更动态地建立WHERE子句。

#### 2.2.4 NOT操作符

**WHERE**子句中的**NOT**操作符有且只有一个功能，那就是否定它之后所跟的任何条件。 

#### 2.2.5 LIKE操作符

- '%'通配符

    在搜索串中，%表示任何字符出现任意次数。其作用相当于正则表达式中的'*'。
    但是，'%'无法匹配**NULL**值。

- '_'通配符

    下划线的用途与'%'一样，只不过有且总是匹配单个字符。

- 通配符使用技巧
    + 不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。
    + 在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。 
    + 仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。

- 正则表达式
    
    当把**LIKE**操作符换为**REGEXP**之后，它将对后面的内容作为正则表达式处理。
    
    - **LIKE**与**REGEXP**的区别
        
        - 对于**LIKE**在没有使用通配符的情况下，如果被匹配的文本在列值中出现，**LIKE**也不会找到它，相应的行也不被返回。
        - 而**REGEXP**会找到它，并且将相应的行返回。为区分大小写，可以在**REGEXP**后添加关键字**BINARY**。

### 2.3 空值检查

在创建表时，表设计人员可以指定其中的列是否可以不包含值。在一个列不包含值时，称其为包含空值NULL。

- 空值(NULL)
    + 它与字段包含0、空字符串或仅仅包含空格不同。 
    + 用来检测空值的语句是**IS NULL**子句。如：
        ```SQL
        SELECT id, name, birthday 
        FROM someTable
        WHERE id IS NULL；
        ```
        这条语句将**id**没有值的行返回。

### 2.4 使用单引号

- 单引号用来限定字符串。
- 如果将值与串类型的列进行比较，则需要限定引号。
- 用来与数值列进行比较的值不用引号。