title: 显示类型转换
date: 2016-10-30 13:28:09
updated: 2017-02-21 15:02:24
tags:
- C++
categories:
- Study
- Computer
- PL
- C++
---

## 1 命名的强制类型转换

一个命名的强制烈性转换具有如下形式：

```cpp
cast-name<type>(expression)
```

- *type*是转换的目标类型，而*expression*是要转化的值
- 如果*type*是引用类型，则结果是左值
- cast-name是以下值
    + static_cast
    + dynamic_cast
    + const_cast
    + reinterpret_cast

### 1.1 static_cast

任何具有明确定义的类型转换，只要**不包含底层const**，都可以使用*static_cast*。
如果编译器发现一个较大的算术类型试图赋给较小的类型时，就会给出警告信息；但是执行显示类型转换后则会关闭警告信息。

- 例子

    ```cpp
    int inter = 10;
    double slope = static_cast<double>inter / 3;//进行强制类型转换以便执行浮点数除法

    void *p = &slope;//任何非常量对象都能存入void*
    double *dp = static_cast<double*>p;//将指针p强制转换为原来的类型
    ```

如果强制转换的类型前后不符，则将产生未定义的结果。

### 1.2 const_cast

*const_cast*只能改变运算对象的底层*const*。
*const_cast*控制的对象只能是指针、引用或指向对象类型成员的指针。

- 示例

   ```cpp
   const char *pc;
   char *p = const_cast<char*>(pc);//正确，但是通过p写值是未定义的行为
   ```


- 对于将常量对象转换成非常量对象的行为，一般称其为**去掉const性质**，一旦去掉*const*性质，编译器就不再组织对该对象的写操作
- 同时，其可以将非常量对象转换为常量对象，即**增加const性质**
- 如果对象本身不是一个常量，则强制转换是合法的行为，否则产生未定义的结果
- 值用*const_cast*能改变表达式的常量属性，使用其他形式的命名强制类型转换改变表达式的常量属性都将引发编译器错误
- 同样，不能用*const_cast*改变表达式的类型

- 示例

   ```cpp
   const char *pc;
   char *q = static_cast<char*>(pc);//错误，不能转换掉const性质
   static_cast<string>(pc);    //正确：字符串字面值转换成string类型
   const_cast<string>(pc);     //错误，const_cast只能用于改变常量属性
   ```

- *const_cast*常常用于有函数重载的上下文中
- 示例

   ```cpp
   //比较两个string对象的长度，返回较短长度的引用    
   const string &shorterString(const string &s1, const string &s2)    
   {    
       return s1.size() <= s2.size() ? s1 : s2;
   }

   //重载上述函数的非常量形参版本，编译器会在传递非常量时优先选用非常量版本的函数
   string &shorterString(string &s1, string &s2)
   {
       auto &r = shorterString(const_cast<const string&>(s1),
                               const_cast<const string&>(s2));//强制转换为const
       return const_cast<string&>(r);
   }
   ```

### 1.3 reinterpret_cast

*reinterpret_cast*通常为运算对象的位模式提供较低层次上的重新解释。

如

```cpp
int *pi;
char *pc = reinterpret_cast<char*>(pi);
```

上例中，*pc*所指的真实对象是一个*int*而非字符，如果把*pc*当成普通的字符指针使用就可能在运行时发生错误。

*reinterpret_cast*本质上依赖于机器，要想安全地使用它，必须对涉及的类型和编译器实现转换的过程都非常了解。

## 2 建议：避免强制类型转换

- 强制转换干扰了正常的类型检查，因此应避免使用强制类型转换
- 在有重载函数的上下文中使用*const_cast*无可厚非
- 但其他强制类型转换都不应该频繁使用，使用时都应考虑是否能以其他方式实现相同的目标，并在使用时进行记录
