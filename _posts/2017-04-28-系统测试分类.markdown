title: 系统测试分类
date: 2017-04-28 10:46:19
updated: 2017-05-08 23:14:16
tags:
- Testing
categories:
- Study
- Computer
- Testing
---
## 前言

> 系统级测试，也称系统测试，其目标是为了确定某一种实现是否符合客户指定的需求。为了达到各种没有具体说明的期望，需要进行多种测试。

## 系统测试分类摘要

- `基础测试`提供一个证据：可以对系统进行安装、配置及进入到可运营的状态
- `功能性测试`对系统功能范围内的全部需求进行全面的测试
- `健壮性测试`是判断系统是否较好地从多种输入错误及其他失败情况中恢复
- `互操作性`是判断系统是否能够与其他第三方产品进行互操作
- `性能测试`是测量系统的性能特征，例如在各种条件下的吞吐量和响应时间
- `可扩展性测试`是判断系统的缩放限制，包括用户增加、地域拓宽和资源增多
- `压力测试`将系统置于压力之下，其目的是为了确定系统的限制，当系统失败时，确定系统失败是以何种方式发生的
- `负载和稳定性测试`提供证据，表明系统能够在长时间满载的情况下保持稳定
- `可靠性测试`测量系统保持长时间运行而不失败的能力
- `回归测试`判断在系统循环地集成其他子系统及执行维护任务后，系统是否保持稳定
- `文档测试`确保系统的用户指南是准确和可用的
- `规章测试`确保系统满足了国家和地区的政府管理机构的要求

## 基础测试

基础测试给出了一个初步的证据，表明系统已经可以进行更严格的测试。这些测试都是针对需求规范中的主要功能而对系统进行的有限测试，其目的是为了确定是否有足够的证据证明系统在没有执行彻底的测试时能够运行。
执行基础测试是为了确保常用的功能满足要求，这些功能并不都是直接与用户层的功能相关，测试工程师依靠对这些功能的恰当实现来针对用户层的功能执行测试。
基础测试类型主要类别如下：
![基础测试类型](../post_img/59102efdab64416a620074fc)

### 启动测试

启动测试是为了验证系统能否通过支持的启动方法来启动他的软件镜像。启动的方法包括从只读存储器、闪存卡等来启动。在启动时，应当试用系统的最大与最小配置。例如，一个路由器的最小配置是指在其插槽中有一个线路卡，而其最大配置意味着所有的插槽都包含线路卡。

### 升级/降级测试

设计升级/降级测试是为了验证系统软件能否以一种适当的方式升级和降级(回滚)，即以从前的版本到现在的版本，反之亦然。一个升级过程的失败可能由于多种不同的原因：

- 用户引起的失败(用户中断升级过程)
- 运行中的网络扰乱(网络环境问题)
- 运行中的系统重启(电力等原因)
- 升级自检失败(磁盘空间不足或版本不兼容等)

### 发光二极管测试

设计LED测试用于验证系统的LED状态功能是否符合要求。LED位于系统的前端面板，他们为模块的运行状态提供了直观的指示。

### 诊断程序测试

设计诊断程序测试用于验证系统的硬件组件的功能是否都符合期望，液称为内置自测试(BIST)。诊断程序测试不会通过手工查错的方式来监测、隔离和辨别系统问题。以下是一些诊断程序测试的例子：

- 开机状态自测试(POST)
    在系统的每个子模块启动阶段，都会执行一组自动诊断程序。`POST`的目的是为了判断硬件是否以一种合适的状态执行软件镜像。他并不是要对硬件进行全面分析，而是对硬件的可用性给出一个较高的置信度。
- 以太网环回测试
    这种测试产生和发送期望数量的数据包，这个数值是一个可调谐参数，并且期望能够通过内部或者外部的环回接口接收到相同数量的以太网数据包。如果产生一个错误，就会在控制台显示错误信息，指出错误的类型、可能的产生原因及推荐措施。测试目的是为了保证以太网卡的功能是符合预期的。
- 误码率测试(BERT)
    板上`BERT`给出了一个标准位错误模式，这个模式可以通过在一个通道上的传送来诊断的目的。`BERT`包括传送一个已知的位模式，然后测试传送模式来发现错误。测试目的是为了确保硬件的功能符合预期要求。

### 命令行界面测试

设计`CLI`测试是为了验证系统可以按照特定的方式来配置或准备。这是为了保证`CLI`软件模块能够正确地处理用户命令，并符合文档描述。这包括来使用`CLI`从系统存取相关的信息。除了以上测试，可以开发测试场景来检验错误信息的显示。

## 功能性测试
功能性测试验证系统是否全面覆盖到需求规范中指明的所有需求。这个测试分成以下几个不同的功能子集合。

![功能性测试](../post_img/59108b4bab644166f8007b1b)

### 通信系统测试

设计通信测试是为了验证通信系统的实现是否符合客户需求规范中的规定。例如，某个客户要求支持请求注解(RFC)791。根据对所提供的一致性指标的符合程度，推荐4种类型的通信系统测试：

- `基本互连测试`提供证据，说明在执行全面测试之前某种实现能否建立一种基本的连接
- `功能测试`检查某种实现能否提供基于静态通信系统需求的可观察功能。静态需求描述了可选项、参数值的范围和计时器
- `行为测试`试图验证某种实现的动态通信系统需求。这些是定义了某种协议的可观察行为的需求和选项。大部分的行为测试可由协议标准生成，这些测试是通信系统测试的主要组成部分
- `系统决议测试`探索为特定的需求提供明确的**是**和**否**的答案

### 模块测试

设计模块测试是为了验证系统中所有模块各自符合预期的功能。模块间的相互作用将这些组件粘合为一个完整的系统。既要确保整个系统中各个模块的功能是正确的，也需要验证系统及控制这些模块的软件，按照需求规范指定的方式运转。

### 记录和跟踪测试

设计记录和跟踪测试是为了验证记录和跟踪的配置与运转是否正常。这也包括对系统崩溃时`飞行数据记录器：非易失闪存`日志的验证。设计测试来计算当激活所有的日志时，对系统的性能产生多大影响。

### 图形用户界面测试

在当前的软件应用中，用户通过GUI访问软件的功能。设计GUI测试用来验证一个应用软件的用户界面，这些测试验证不同的组件，例如图标、菜单栏、对话框、滚动条、列表框和单选按钮等。应当检查从实际系统用户的角度所考虑的GUI设计，以及输出报告的易用性。在线帮助、错误消息、用户向导既用户手册的可用性都应当得到验证。
GUI可以用来测试界面背后的功能，如对数据库查询的准确响应。GUI必须是兼容的，并且具有在不同的操作系统、环境及鼠标和键盘驱动输入下的一致性。
与GUI测试类似，另外一个测试分支称为易用性测试，在过去几年里已经得到了发展，可以测试的易用性特征有以下几种：

- `无障碍性`用户可以比较方便地进出导航吗？
- `响应性`用户能够以一种很清晰的方式在希望的时间做他想要做的事情吗？包括人体工程学的因素，比如颜色、形状、声音及字体大小
- `效率`用户能否在最少的步骤和最短的时间里做他们所要做的事情
- `可理解性`用户能否用最少的努力来理解产品结构

### 安全性测试

设计安全性测试是为了验证系统是否满足来安全需求：保密性、完整性和可用性。

- 保密性是防止非法暴露数据和进程的需求
- 完整性是为了防止非法篡改数据和进程的需求
- 可用性是保护数据和进程以免授权的用户被拒绝服务的需求

安全性需求的测试方案只是展示了是否满足来安全需求而不考虑这些需求是否是足够的。绝大多数软件规范不包含负面性的和限制性的需求。安全性测试应该包含负面性的场景，例如对系统的误用和滥用。
安全性测试的目的是为了展示以下方面：

- 软件在所有情况下的表现都是安全的且一致的
- 即使软件出错了，也不会导致软件及其数据、资源受到攻击
- 不会危害和利用代码的模糊部分和休眠的函数
- 应用程序模块与框架和中间件，以及不同层次操作系统之间的接口和交互始终是安全的
- 异常和错误处理机制能够解决所有的异常与错误，并且不会使软件、资源、数据或环境处于易被无授权修改或遭受Dos攻击的状态

下面列出了一些有用的安全测试的类型：

- 验证只有经过授权的对系统的访问是允许的
- 验证系统中对数据和消息进行编码的加密和解密算法是正确的
- 验证未授权犯罪者对文件的非法读取是不允许的
- 确保病毒检查程序能阻止或截断病毒进入系统
- 尝试识别系统中的后门，者通常是由软件开发人员留下的。缓冲区溢出是代码中最常见的一种漏洞，可以危害系统安全，并被利用侵入系统
- 验证授权服务器所使用的不同协议
- 验证客户-服务器通信的安全协议
- 验证不同的无线安全协议

### 特征测试

设计特征测试用来验证任何在需求规范中定义的但在以上类别中没有包含的其他功能。这类测试的例子有数据转换和跨功能测试。
数据转换测试是程序或过程的测试，用于将一个现存系统的数据转换为一个替代系统的数据，其中一个例子是测试一个迁移工具，其将*Microsoft Access*数据库转化为*MySQL*的格式。
跨功能测试为功能间的相互依赖提供的附加测试。

## 健壮性测试

健壮性是指系统对于不正确的输入及其运行环境中变化的敏感度。设计这个类别的测试，用来验证系统在错误条件下及改变的运行环境中的行为是否合理。其目标是故意破坏系统，但这不是目的本身，而是发现错误的一种手段。要测试每一种系统的不同操作状态或环境的非预期行为的组合是很难的。因此，可以从每个类型中选择合理数目的测试。

![健壮性测试](../post_img/59108b4bab644166f8007b1a)

### 边界值测试

边界值测试要覆盖边界值、特殊值及系统设定值。这种测试包括想系统提供不正确的输入数据，并且观察系统如何针对错误输入作出反应。系统应当以一条错误消息作为回应或开启一个错误处理例程。应当验证系统是否针对一个可配置属性的自己处理边界值。

### 电力循环

执行电力循环测试，用来确保当某种部署环境中出现里一个电源故障时，系统能够在电力恢复之后从故障回到正常的操作。

### 在线插入和删除

设计在线插入和删除(OIR)测试，用来确保在空闲和重负载操作运行中引起的模块在线插入和删除操作得到里合理的处理和恢复。在去除失败条件之后系统恢复到正常的运行。主要目的是确保从一个OIR事件中恢复的系统没有重启或者破坏其他组件。执行OIR测试是为了确保在替换一个出错模块之后系统是否能够无故障地运转。

### 高可用性

设计高可用性测试用来验证单个模块的备用模块，包括控制这些模块的软件。目的是为了验证系统能够从硬件和软件失败中迅速地恢复，而不对系统的运行产生不利的影响。高可用性的概念也称为故障容错，是通过最大化服务的正常运转时间和最小化故障发生时间来实现的。一个模块在活动模式下运行而另一个处于准备模式下，就成了一个`1 + 1`的备用。对于这种运行模式，设计测试来验证以下几点：

- 备用模块产生来一个OIR事件，不影响系统的正常运行
- 在系统运行时，恢复时间没有超出预先的限制。恢复时间是运行模块成为备用模块而备用模块成为运行模块所花费的时间
- 当一个故障切换(fail-over)事件发生时，服务器能够自动地从运行状态转换到备用状态。故障切换是在一个备用服务器接管来活动服务器的工作负荷时产生的

### 降级节点

降级节点(也称为失败控制)测试验证在系统的一部分不工作之后系统的运行状态。这对于所有的任务关键的应用程序都是一种有用的测试。降级节点测试的举例如下：

- 切断了一个路由器到另一个路由器的4个物理连接中的一个，验证剩下的3个物理连接的负载平衡。确认数据包平均地分配给了3个运行的连接

- 使路由器的主插口不可用，验证信息通过备用接口的传送没有对终端用户的使用造成明显的影响。接下来，重新激活主插口，并验证路由器回到了正常的运行状态 

## 互操作性测试 

设计测试用来验证系统与第三方产品的互操作能力。互操作性测试典型地实在一个测试环境中将不同的网络元素组合起来，从而确保他们在一起工作正常。换句话说，设计测试用来确保软件能够与其他系统相结合并且能够进行操作。
在许多情况下，在互操作性测试中，用户可能会要求硬件设备是可互换的、可移动的或者可重配置的。通常，一个系统会有一个命令集或菜单集，允许用户做出配置改变。
另外一种互操作性测试类型称为兼容性测试，验证系统在不同平台、跨不同操作系统及跨不同数据库管理系统的情况下以完全一致的方式运行。

## 性能测试

设计性能测试用来判断相比于期望的系统，实际系统的性能如何。需要测定的性能指标不同的应用软件而不同。如IO吞吐量、响应时间、执行时间、资源使用率和通信速率等。
对于性能测试，为了对性能指标做出评估，需要确定要捕获的特定数据。例如，如果目标是评估响应时间，那么需要获取：

- 端到端响应时间
- CPU时间
- 网络连接时间
- 数据库访问时间
- 等待时间

## 可扩展性测试

所有的人工制品都具有工程上的限制。例如，一辆汽车可以在最好的路况下以一个特定的最大速度行驶，一个路由器有一个特定的最大接口数目，等等。
设计测试是用来验证系统能够扩展规模到他的工程限制。系统可能在一个特定的限制后最终失败，这个想法就是测试系统的限制，也就是将系统置于一个需求的数量级，并且系统继续满足等待时间和吞吐量要求。在一个级别的需求下系统工作可满足需求，但可能无法提升到另一个级别。
执行可扩展性测试是为了确认当增加大量的用户时，系统的响应时间应保持原来的水平或者增加很少。系统更可以进行扩展直至达到一个或者多个工程限制的时候，出现这些限制有三个主要原因：

- 数据存储限制——计数域大小和分配的缓冲区空间的限制
- 网络带宽限制
- CPU速度限制

## 压力测试

压力测试的目标是评估和判断软件组件在负载超出了他的设计量时的行为。有意给系统压力，达到并超出它的极限。压力测试包括有意造成的对稀缺资源的争用，以及不相容性测试。他确保系统在一个预期的峰值负载的最坏情况下执行的行为是可接受的。如果超出极限之后系统确实已经停止了，那么应当调用恢复机制。
压力测试的目标是引发与下面的一项与多项相关的问题：

- 内存泄漏
- 缓冲区分配和内存碎片

设计压力测试的一种途径是，同一时刻将所有的系统性能特征都加到最大的限制，比如响应时间、可用性及吞吐量的临界值。这就真正提供了一组最坏条件的组合，在这种情况下仍然期望系统能够以可接受的方式运行。
发现系统瓶颈的最好方法是在系统内部和外部的不同位置执行压力测试。例如，先对系统的每个组件执行单独的测试，从最深处的系统核心组件开始，逐渐地外移，最后从系统外部的较远位置进行测试。当所有独立组件都在超出他们最高限制的情况下接受了测试之后，通过同时测试所有连接到系统的、在其最大负载限量下的操作来测试整个系统。`负载可以有意地逐渐增加，直到系统最终停止运行；当系统停止运行后，观察失败的原因和发生位置。`这条信息对于设计系统的以后版本是有用的，可以改进系统的健壮性或者为失败恢复计划开发程序。

## 负载和稳定性测试

设计负载和稳定性测试，用来确保系统在满负荷之下运行很长时间仍能保持稳定。当一些谨慎的测试人员以某种计划的方式运行系统时，系统的功能可能是完美的。但是，当大量用户进入，使用几个月没有重启过、不相容的系统和软件时，大量问题就有可能发生：

- 系统变慢
- 系统遇到功能问题
- 系统发生故障
- 系统完全崩溃

负载和稳定性测试一般由实际用户运行系统，并且对性能做出测量，从而验证系统是否能够支持期望的负载。

## 可靠性测试

设计可靠性测试用于测量系统长时间保持运行的能力。软件可靠性是指一个软件系统在一个特定的环境和特定的时间段中无故障运转的概率。系统的可靠性由`平均失败时间(MTTF)`表示。在测试软件、遍历系统测试阶段时，观察错误并试图去除缺陷，然后继续测试。在这个前进过程中，记录连续的错误之间的持续时间。用$t_1, t_2, ..., t_i$来表示这些连续的时间间隔。所有时间间隔的平均就称为`MTTF`。
在观察到一个错误后，开发人员对他进行分析及修复，这个过程要消耗一些时间，称其为`修复时间`。所有修复时间的平均值称为`平均修复时间(MTTR)`。从而，可以计算`平均故障间隔时间(MTBF)`:$$ MTBF = MTTF + MTTR $$

## 回归测试

在这个类型中，不会设计新的测试，而是从已存的集合中选择测试用例来执行，确保新的软件版本没有错误。回归测试的主要思想是验证当系统的某处发生变化时，不会给没有变化的部分引入缺陷。
在系统测试过程中，许多缺陷显现出来，随后改变代码来修复那些缺陷。而改变代码的结果可能是，每次修复会引起以下4种不同的情况之一：

- 修复了报告的缺陷
- 尽管做了努力，但是不能修复报告的缺陷
- 修复了报告的缺陷，但是之前正常运行的某些部分却不能运行了
- 尽管做出了努力，但是不能修复报告的缺陷，而且之前正常运行的某些部分却不能运行了

考虑到以上4种可能，似乎在执行任何新的测试之前，应当重新执行从版本$n-1$到版本$n$的每一个测试用例。然而这种代价及其昂贵，而且，新的软件版本通常在修复了缺陷之前，还具有很多新的功能。因此，需要仔细地从现存的测试套件中选择一个测试用例子集来做到：

- 最大化揭示新的缺陷的可能
- 降低测试的代价

## 文档测试

文档测试用于验证用户技术手册的准确性及可读性，包括教程和在线帮助。文档测试的执行有以下三个层次：

- `阅读测试`在这种测试中要审查文档是否清楚、组织清晰、流畅和准确，但并不执行文档记录的系统命令
- `手动测试`运行在线帮助，验证错误消息，评估它们的准确性和有用性
- `功能测试`遵照文档中包含的指令来验证系统是按照文档的记录运行的

推荐使用以下的具体测试进行文档测试：

- 阅读所有的文档来验证
    - 语法的正确使用
    - 术语的使用具有一致性
    - 在需要的地方适当使用图标
- 验证文档附加的术语表使用了标准、普遍接受的术语，而且术语表正确地定义了这些术语
- 验证对每个文档都有一个索引，而且索引部分是相当丰富和完整的。验证索引指向来正确的页
- 验证文档中没有内部不一致的现象
- 验证文档的在线和打印版本是完全一致的
- 验证在实际环境中按照手册中描述的步骤来执行的安装过程是否可行
- 插入错误，然后使用故障修复说明书来修复该错误，通过这种方式来验证说明书
- 验证软件版本说明来确保这些说明准确地描述了
    - 当前版本和以前版本之前的特性和功能变化
    - 已知缺陷的集合和它们对客户端的影响
- 验证在线帮助的
    - 易用性
    - 完整性
    - 相关主题的超链接和交叉引用的有用性
    - 查表的有效性
    - 索引的准确性和有用性
- 按照文档描述来配置系统，验证用户手册的配置部分
- 最后，在执行系统测试用例时使用文档。利用文档，将计划中或者已有用户的行为和步骤走一遍，确保文档与用户动作是一致的

## 规章测试

在这个类型中，最终的系统要发送给该产品期望销往的国家和地区的监管部门。这里的想法是要从那些机构为产品获得达标标识。
软件安全性是以危险因素定义的。一个危险因素是系统的一个状态或者一个物理环境，当他与特定的环境条件相结合时，可以导致一个事故或者意外。
孤立的软件本身并不会造成物理上的伤害，但是当他用在系统中或一个嵌入式环境中可能容易受到损坏。例如，一个数据库程序中的模块本身没有危险性，但是将其嵌入到一个导弹制导系统中时，却可能很危险，如因为软件错误导致导弹折返并摧毁了发射他的潜艇，那么这就不是一个安全的软件。因此，厂商和管理机构努力确保软件在第一次发布时就是安全的。
开发安全性至关重要的软件系统的组织必须由一个安全保证计划以消除安全隐患，或者将与之相关的风险降低到一个可以接受的水平。安全保证工程师需要完成两项基本任务：

- 提供识别、跟踪、评估和消除系统相关危险的方法
- 确保安全以及时且有效的方式嵌入到设计和实现中，以保证由用户或操作人员导致的错误最小化。因此，在事故中造成的潜在损失降到最小
## Reference

[1] Kshirasagar Naik. 软件测试与质量保证[M]. 郁莲, 译. 北京:电子工业出版社, 2013.1:131-149.

