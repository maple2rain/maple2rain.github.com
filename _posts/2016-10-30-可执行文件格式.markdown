title: 可执行文件格式
date: 2016-10-30 13:37:55
updated: 2017-04-23 11:56:08
tags:
- FileFMT
categories:
- Study
- Computer
- PL
- Asm
---
# 可执行文件格式

## 1 可执行文件组织

操作系统大都为可执行文件采用专门的格式。
通常可执行文件格式与目标文件格式相似，主要区别在于**可执行文件中一般没有未解析的外部引用**。
目标代码文件通常设计得尽量小，而可执行文件则往往设计成尽可能快地调入内存。

- 合理增加可执行文件大小能提高性能

    操作系统的页管理系统在准备执行应用程序时，只调入能够启动应用程序的那些页，包括可执行代码的首页、存放栈数据的内存页及一些可能的数据页，其他页则在**需要**时再调入，即**按需的页内存管理(Demand-paged Memory Management)**。
    若内存中的段对齐至可执行文件中按页划分的边界(意味着文件块大小应为磁盘扇区的整数倍)，则**虚拟内存管理系统**能将磁盘上的文件块快速拷贝到内存中的某一页，更新任何标有的重定位值，继续程序的执行，从而加快了可执行文件尽可能快地调入内存；而当段没有对齐时，则操作系统不得不从磁盘上的两个扇区读取内容，增加了调入时间。

### 1.1 可执行文件数据

|   元数据   |                        说明                       |
|------------|---------------------------------------------------|
| 机器代码   | 无                                                |
| 二进制数据 | 无                                                |
| 调试信息   | 无                                                |
| 链接信息   | 动态库链接的一些相关信息                          |
| 调入信息   | 定义操作系统应怎样将文件各区域调入内存的信息      |
| 重定位信息 | 因CPU和操作系统而异而需要重定位，以便修正绝对地址 |

## 2 页、段和文件大小

### 2.1 页

虚拟内存子系统和内存保护方案按**页**操作内存，典型处理器的一页通常结余**1KB**~**64KB**之间。

页是设定具有以下独特保护特性的页内数据的最小单位

- 数据只读
- 数据可读写
- 可执行

特别的是，只读/可执行代码与可读写数据无法共存于同一页——必须位于内存中的不同页。

### 2.2 段

大部分程序包含有若干**段**，可以对其分别设立保护权限，每个段都会请求在内存中获得专用的一到多个页，而不与其他区域共享。

典型程序在内存中至少有以下4个区域：

- 代码或文本
- 静态数据
- 未初始化数据
- 栈

此外，许多编译器还生成其他段：

- 堆
- 链接段
- 只读段
- 常量数据段
- 应用程序具名数据段

由于操作系统将段映射为页，所以某个段所请求的子节数总为页尺寸的整数倍。
假设程序某个段只含有*1*字节的数据，那么该段照样会申请一个页大小的内存。
又假设一个应用程序含有*6*个不同的段，每个内存页的大小为*4*KB，那么它至少占用*24*KB内存。

- BSS段

    **BSS(Block Started by Symbol)**即**由符号开始的块**，用于存放未初始化静态变量。
    在有些可执行文件格式中，**BSS**段很小，只是用于把**BSS**段的大小告诉给操作系统调入程序。
    可执行文件若有**BSS**段，就可以向应用程序添加新的未初始化静态变量，却不影响可执行文件的大小。
    增加**BSS**数据后，编译器只需调整一个值，告知调入程序应为未初始化变量保留多少字节即可，而其是在运行期间请求主存；倘若在初始化数据段添加同样的这些变量，则会使可执行文件大小随这些数据而增大。

## 3 内存碎片

即便区域数据量并非页尺寸的整数倍，内存中的每个区域仍要占据整数页。
区域内从最后一个数据/代码字节开始到页末的所有字节都浪费掉了，这就是**内存碎片**。
可执行文件的大小还包括运行时期动态分配的数据，如堆中的数据及CPU栈中的值，因此应用程序其实能够占据比可执行文件尺寸大得多的内存。
堆中数据会造成内存碎片，而由于链接器对齐代码和数据带来的读取效率提高的同时也会带来内存碎片，因为对齐时需要填充空字节以对齐从而造成碎片。