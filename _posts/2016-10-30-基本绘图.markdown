title: 基本绘图
date: 2016-10-30 09:24:45
updated: 2016-10-30 14:41:39
tags:
- OpenCv
categories:
- Study
- Computer
- Graphics
- OpenCV
- Drawing
---
## 1 Point

指定图像二维点。其图像坐标x和y指定2D点。如
```cpp
Point pt;   //定义一个对象
//Point p = Point(10, 8);//构造方法初始化
/*赋值*/
pt.x = 10;
pt.y = 8;
```

## 2 Scalar

- 表示了具有4个元素的数组，常被大量用于传递像素值
- 前三个参数定义了图像的BGR值

## 3 绘制直线

使用**line**函数绘制直线

```cpp
void MyLine(Mat img, Point start, Point end)
{
    /*
    画一条从点 start 到点 end 的直线段
    此线段将被画到图像 img 上
    线的颜色由 Scalar(0, 0, 0) 来定义,在此其相应RGB值为 黑色
    线的粗细由 thickness 设定(此处设为 2)
    此线为8联通(lineType = 8)
    */
    int thickness = 2;
    int lineType = 8;

    line(
        img,
        start,
        end,
        Scalar(0 , 0, 0),
        thickness,
        lineType);//绘制直线
}
```

## 4 绘制椭圆

使用**ellipse**函数绘制椭圆

```cpp
void MyEllipse(Mat img, double angle)
{
    /*
    椭圆将被画到图像 img 上
    椭圆中心为点 (w/2.0, w/2.0) 并且大小位于矩形 (w/4.0, w/16.0) 内
    椭圆旋转角度为 angle
    椭圆扩展的弧度从 0 度到 360 度
    图形颜色为 Scalar( 255, 255, 0), 即蓝色
    绘椭圆的线粗为 thickness, 此处是2
    */
    int thickness = 2;
    int lineType = 8;

    ellipse(
        img,
        Point(w / 2.0, w / 2.0),
        Size(w / 4.0, w / 16.0),
        angle,
        0, 
        360,
        Scalar(255, 0, 0),
        thickness,
        lineType);
}
```

## 5 绘制圆

使用**circle**函数绘制圆

```cpp
void MyFilledCircle(Mat img, Point center)
{
    /*
    圆将被画到图像 ( img )上
    圆心由点 center 定义
    圆的半径为: w/32.0
    圆的颜色为: Scalar(0, 0, 255), 按BGR的格式为 红色
    线粗定义为 thickness = -1, 因此此圆将被填充
    */
    int thickness = -1;
    int lineType = 8;

    circle(
        img,
        center,
        w / 32.0,
        Scalar(0, 0, 255),
        thickness,
        lineType);
}
```

## 6 填充多边形

使用**fillPoly**函数填充多边形

```cpp
void MyPolygon(Mat img)
{
    /*
    多边形将被画到图像 img 上
    多边形的顶点集为 ppt
    要绘制的多边形顶点数目为 npt
    要绘制的多边形数量仅为 1
    多边形的颜色定义为 Scalar( 255, 255, 255), 既BGR值为 白色
    */
    int lineType = 8;

    /** 创建一些点 */
    Point rook_points[1][3];
    rook_points[0][0] = Point(w / 4.0, 7 * w / 8.0);
    rook_points[0][1] = Point(3 * w / 4.0, 7 * w / 8.0);
    rook_points[0][2] = Point(3 * w / 4.0, 13 * w / 16.0);

    const Point* ppt[1] = { rook_points[0] };
    int npt[] = { 3 };

    fillPoly(img,
        ppt,
        npt,
        1,//多边形数量
        Scalar(255, 255, 255),
        lineType);//用于填充多边形
}
```

## 7 绘制矩形

使用**rectangle**函数绘制矩形

```cpp
    /*
    矩形将被画到图像 rook_image 上
    矩形两个对角顶点为 Point( 0, 7 * w / 8.0 ) 和 Point(w, w)
    矩形的颜色为 Scalar(0, 255, 255) ，既BGR格式下的 黄色
    由于线粗为 -1, 此矩形将被填充
    */
    int lineType = 8;

    rectangle(rook_image,
        Point(0, 7 * w / 8.0),
        Point(w, w),
        Scalar(0, 255, 255),
        -1,
        lineType);
```