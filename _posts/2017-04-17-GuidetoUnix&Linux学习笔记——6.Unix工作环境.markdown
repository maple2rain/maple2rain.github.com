---
layout: post
author: LPF
title: Guide to Unix & Linux学习笔记—— 6.Unix 工作环境
date: 2017-04-17 15:22:55
updated: 2017-05-19 16:17:35
categories:
- Study
- Computer
- OS
- Linux
- Guide to Unix & Linux 
---
# 同时做不止一件事情：I

Unix系统是多任务处理系统，这意味着Unix系统可以同时运行不止一个程序。然而事实是计算机(单核)实际上不能在同一时间执行两个相似的任务。在计算机系统内,所谓的多任务处理实际上是一个非常快速的机器快速地执行多个任务,看上去就像它们同时被执行一样。
在Unix中,我们不谈论程序的执行,而是谈论`进程`(process)的执行。进程就是装载到内存中准备运行的程序,以及程序的数据与跟踪程序状态所需的信息。

----------


> 名称含义
**进程**
进程这一思想是Unix的基础。实际上,在Unix系统中,每个对象或者用文件表示,或者用进程表示。简单地讲,文件存放数据或者允许访问资源,而进程是正在执行的程序。
进程可以分成更小的单元,称为线程,线程是一组运行在进程环境中的指令。因此可以将程序的结构描述为,在一个进程之内,不止一个线程在同时运行。

----------

无论何时,Unix系统都拥有许多活跃的进程,每个进程为了运行要请求处理器时间。但是,一个处理器一次只能执行一个进程。这意味着单处理器的计算机在某一时刻只能接受一个请求。多处理器的计算机能够处理多个请求,但是即使这样,也不可能在同一时间服务所有的进程。
为了管理如此之多且相互重叠的处理器请求,Unix使用了这样一种系统,即允许每个进程轮流使用处理器一段极短的时间的系统。这一段极短的时间称为`时间片`(time slice)。典型的时间片通常是10毫秒(千分之十秒)。
一旦时间片用完,当前进程就会挂起(中断等待),然后一个特殊的服务(`称为调度器`)决定接下来执行哪一个进程。因为时间片非常短,处理器非常快,而且Unix调度器非常巧妙地处理所有的事情,所以看起来就好像Unix同时处理多个事情一样。因此,多任务处理的假象就这样产生了。

----------

# GUI和CLI

`图形用户界面`是GUI(Graphical User Interface)，而基于文本的界面通常称为`命令行界面`(Command Line Interface)。
Unix系统基于文本的基本界面比较简单。shell显示一个提示。输入一个命令，shell完成执行该命令所需的事情。一旦命令处理完毕，shell就显示另一个提示，可以输入另一条命令，并这样一直轮流循环。
整个过程只使用文本(纯字符)，而且键入命令的行称为`命令行`(Command Line)。因此，名称**命令行界面**由此而来。

----------

> 提示
作为Unix用户，您需要的基本技能是使用命令行输入一条又一条的命令来解决问题。

----------


# 运行级别

当计算机系统、程序或者设备可以有几种状态时，我们使用术语`模式`(mode)来指一个特定的状态。例如，可以以文本模式(CLI)或者图形模式(GUI)使用Unix。
模式时计算领域一个十分基本的概念，计算机人员经常开玩笑地使用这个术语指头脑的状态。
Unix的引导过程是灵活的，这种灵活性是通过使Unix拥有以几种不同模式运行的能力来完成的。这些模式称为`运行时级别`(runtime level),或者简称为`运行级别`(runlevel)。
运行级别的严格定义多少有些偏于技术：`运行级别指允许特定进程组存在的系统软件配置`。这是一个不容易理解的定义，因此给出一个不太正式的定义，即运行级别制定Unix将提供哪些基本的服务。对于不同的运行级别，Unix提供不同的服务组。
Unix系统每次引导时，他都要经历一个复杂的过程。作为该过程的一部分，运行级别就是这时设置的，设置的运行级别控制Unix的运行模式，如下表所示是典型的Linux运行级别：

|运行级别|描 述|
|---|
|0|关机|
|1|单用户模式：命令行|
|2|非标准化|
|3|多用户模式：命令行|
|4|非标准化|
|5|多用户模式：GUI|
|6|重新启动|

运行级别1是旧时代的一个延续,那时大多数Unix系统由许多用户共享,并由一名系统管理员管理。有时候,系统管理员需要做一些不允许其他人同时登录系统的工作。换句话说,在一个短暂时间内,系统管理员必须将一个多用户的用户系统转换成一个单用户的系统(过去称为`系统维护模式`)。

----------


# 多桌面/工作空间

当使用GUI时，所工作的基本空间称为`桌面`。

----------


> 名称含义
**桌面、工作空间**
在GUI中,桌面是基本的工作环境。桌面包含背景,窗口,任务栏等。
大多数桌面环境允许使用多个桌面。这样将带来一个优点,即能够创建多个外观和感观上相像的图形工作环境。
但是,名称**桌面**可能使人迷惑,因为它通常还用于指桌面环境本身,也就是整体上的GUI。基于这一原因,您经常可以看到将桌面称为`工作空间`(workspace),这样就更切合实际了。
例如,当使用KDE时,您使用**桌面**。当使用Gnome时,您使用**工作空间**。无论怎么称呼,它们都指同一件事情,而且抛除细小的细节,它们还以相同的方式工作。

----------


从一个桌面/工作空间切换到另一个桌面/工作空间的方式有两种，可以使用鼠标或者键盘。
使用鼠标时基本依赖于桌面环境的设置，如点击相应的桌面方块。而使用键盘时，

- 对于KDE，快捷键是`Ctrl-Tab`和`Ctrl-Shift-Tab`
- 对于Gnome，快捷键是`Ctrl-Left`、`Ctrl-Right`、`Ctrl-Up`、`Ctrl-Down`(即按住`Ctrl`和`Alt`的同时按住一个方向键)。

----------


# 虚拟控制台

当启动Linux时，GUI(设置为默认时)自动启动，而实际上Linux启动了7个不同的终端仿真程序，他们称为`虚拟控制台`。
虚拟控制台#1～6都是全屏、基于文本的终端，用来使用CLI。虚拟控制台#7是图形终端，用来运行GUI。(也有可能是#1是图形终端，其他是文本终端)。实际上，当桌面管理器启动时，实际上显示的是虚拟控制台#7，其他6个虚拟控制台此时都不可见。
为了从一个虚拟控制台切换到另一个虚拟控制台，需要按特殊的按键。对于虚拟控制台#1,按组合键`Ctrl-Alt-F1`。对于虚拟控制台#2,按组合键`Ctrl-Alt-F2`;以此类推。
当按下这些组合键中的一个时,您将立即看到一个全屏的CLI终端。您可以根据需要使用6个这样的终端。为了返回到GUI(桌面环境)中,只需按组合键`Ctrl-Alt-F7`即可。

----------

> 提示
从一个虚拟控制台切换到另一个虚拟控制台的快捷键实际上是 `Alt-F1` (终端 #1)至 `Alt-F7`(终端 #7)。但是,在大多数GUI中,这些键有其他的用途,因此还必须按下`Ctrl`键。
例如,假如您正在使用GUI(终端 #7)。为了切换到终端#3,您需要按组合键`Ctrl-Alt-F3`。假如您正在使用一个CLI,为了切换到终端 #4 ,可以按 `Alt-F4`;为了切换到终端 #1 ,可以按`Alt-F1`;依此类推,为了切换回终端 #7 (GUI),则需要按`Alt-F7`。
那么为什么您希望使用`Alt`自己而不是`Ctrl-Alt`呢?因为这样更简单更快速,而Unix用户希望事情尽可能简单快速。

----------

# 鼠标选择与插入

X Window的选择/插入功能只针对文本,也就是字符。首先,`用鼠标选择一些文本`。然后移动鼠标到希望插入文本的地方,`按下鼠标滚轮(中键)`。只要您一单击鼠标滚轮,所选择的文本就会插入。如果鼠标没有滚轮,则可以同时单击鼠标的左键和右键。
另外，您还可以以另外两种方式选择文本。如果双击鼠标,则会选中一个单词;如果三击鼠标,则会选中整行文本。

----------


# 切换用户：su

`su`命令允许临时变成另一个用户标识，只需在`su`命令后输入新的`用户标识`并在提示后输入口令即可。如，

```sh
$ su username
Password:
```
其中`username`是新的用户标识，在输入后按下`Return`键将出现`Password`提示，提示输入口令。
当结束新用户的工作时，即可结束当前的shell，通过输入`exit`或按`Ctrl-D`键。一旦结束新shell，就可以自动返回到原来的shell。
无论何时，当用户登录时，Unix都会运行一些特定的命令为用户标识建立一个具体的环境。但是如果采用`su`命令切换用户时，仍然保留了原先用户的环境。如果希望同时变换`用户标识和环境`，则需要在`su`命令名称后键入一个`-`(dash连字符)。注意，连字符的两边都有一个空格。

```sh
$ su - username
Password:
```

现在，环境将更改为新用户的环境，在退出后在还为原用户的环境。
为了切换成超级用户，需要使用`su`命令，后面跟超级用户标识`root`，或者不接任何用户标识(此时默认为root)。
在成功切换后，可以注意到shell提示符已经变成了`#`。

----------


# 以超级用户执行一条单独的命令：sudo

作为超级用户的时间太长可能会非常危险，因为会不小心键入导致故障的内容。另外，还有一个潜在的问题，就是短时离开计算机时，未退出超级用户，从而让人有机可乘做坏事。
防范这些不经意间的错误的最好方法就是使用`sudo`命令。
`sudo`命令允许您以另一个用户标识执行一条单独的命令(名称`sudo`的意思时**替换当前用户标识，然后做一些事情**)。和`su`命令一样，`sudo`命令的默认用户标识为`root`。因此，为了以超级用户执行一条具体的命令，只需键入`sudo`，后面接这条命令即可，如：

```sh
$ sudo command
```

当使用`sudo`以`root`用户标识执行命令时，系统将要求输入用户的口令(不是root的口令)。
如可以使用下列例子，看在不同情况下输出变化：
![](../post_img/58f48b99ab64415134003930)

> 命令提示
`id`命令显示当前用户的标识，包括其ID、所属组标识等。

----------

> 名称含义
**su、sudo**
`su`(substitute userid)命令允许您变换到另一个用户标识。`sudo`(substitutethe userid and do something)命令允许您以另一个用户标识的名义执行一条单独的命令。
名称`su`的发音是两个单独的字母**ess-you**,而名称sudo的发音听起来像**pseudo**。实际上,刚开始听人说`sudo`时,您可能会迷惑,因为听起来就好像在说**pseudo**。
su和sudo的使用是一种习惯,不仅可以作为名称,还可以作为动词。例如,我们偷听一下两个喝多了酒的Unix人士的谈话。
人物1:*I have an idea. Let's edit the password file just for fun. All wehave to do is pseudo the `vipw` command*.(我有一个主意。让我们为了好玩编辑一下口令文件吧。我们需要做的就是使用sudo执行vipw命令。)
人物2:*Ahh, that's too lame. Let's ess-you instead. I like to live dangerously*.(哈哈,那也太差劲了,我们还是使用su吧。我喜欢冒险的生活。)

----------


# 配置文件

大多数Unix程序是这样编写的,即可以通过编辑一个配置文件来定制程序。`配置文件`中包含有程序需要读取的信息,通常是在程序启动时读取。该信息影响程序的工作方式。
当安装新软件时,配置文件特别重要。多半情况下,软件使用一个配置文件,如果希望设置特定选项,则需要修改这个文件。在大多数情况下,随软件一起提供的文档中会详细解释配置细节。
对于某些软件来说,有一些易用的程序可以帮助修改配置文件。例如,在桌面环境中,提供有基于菜单的程序,可以使用它们来选择参数及指定选项。您可能不知道,所有这些参数和选项都存储在一个位于某个地方的配置文件中。当您“应用”修改时,程序根据您的指令将全部修改更新到配置文件中。
尽管这是一种修改配置文件的方便方法,但是更重要的是您要学习如何自己编辑这样的文件,原因有以下几点。

- 首先,大多数程序没有提供基于菜单的配置程序,因此,如果希望进行修改的话,您不得不自己修改
- 其次,自己修改配置文件要比使用程序修改快(而且更有乐趣)
- 第三,即便有菜单驱动的程序,也不可能允许访问所有可能的选项和参数。为了真正知道有什么选项和参数可用,您不得下查看配置文件
- 最后,当查看配置文件时,您可以了解底层程序如何运作。程序员通常都会在配置文件中添加注释。有时候,`真正理解程序更微妙部分的唯一方式就是阅读程序的注释`

----------

> 提示
在编辑任何重要文件(例如配置文件)之前,最好先对文件做一个备份。这样,如果出现了问题,还可以恢复原始的配置文件。
下面示范一下我如何去做。假设我希望编辑一个叫harley的文件,而且这天的日期是2008年12月21日。在开始之前,我先为这个文件复制一个副本,并将副本命名为harley-2008-12-21。然后,如果出现了问题,我就可以将这个文件复制回该文件的最初名称。
为什么不使用harley-或者harley-original或者harley-old这样的名称呢?这样虽然也行,但是有时候我希望在结束工作之后仍然保留备份文件。通过在文件名称中嵌入日期,我可以知道备份文件创建的时间。

# 浏览配置文件

为了浏览配置文件，可以使用一个叫`less`的程序，`less`的任务就是每次一屏地显示一个文件的内容。
如为了查看名为`/etc/passwd`的文件，可以使用命令：

```sh
$ less /etc/passwd
```

----------


# 系统关闭与重新启动：init、reboot、shutdown

`关机`：停止Unix并关闭计算机。
`重新启动`：先停止Unix，然后再重新启动。

通常，为了启动系统，要再启动过程中选择一种运行级别。而为了关机和重启，也可以通过修改运行级别来完成。
修改运行级别的命令是`init`。为了使用`init`，需要成为超级用户，输入该命令，后面跟上希望修改的运行级别就可以对运行级别进行更改。例如，

```sh
$ sudo init 0 // 关机
$ sudo init 6 // 重启
```

尽管可以使用`init`命令来重新启动或者关闭系统,但是它并不是为日常使用设计的。实际上,在日常操作中,我们通常使用其他两个命令:`reboot`和`shutdown`。
`reboot`命令非常简单。只需输入这个命令,系统就会变换到运行级别6:

```sh
$ sudo reboot
```

`shutdown`命令稍微有点复杂,因为您必须指定何时关闭系统。选择有许多种,最简单的一种就是使用单词**now**,键入这个命令就告诉系统立即变换到运行级别0。:

```sh
$ sudo shutdown now
```

----------


# 系统启动或者停止时发生什么事情？dmesg

在系统启动或者关闭过程中,Linux在控制台上显示许多消息。这些消息大多数与系统硬件组件的发现和配置相关。其他消息则与启动过程中包含的服务的启动和停止相关,或者与系统一旦启动后将在后台运行的进程有关。
在系统启动时,许多消息都是一闪而过,根本就来不及仔细阅读,更不用说领会它们的含义了。但是,一旦您登录系统,就可以在空闲的时候显示启动消息。只需在命令行上输入下述命令即可:

```sh
$ dmesg | less
```

----------

# 同时做不止一件事情：II

计算机在存储和恢复数据方面要比人类快速得多,而且还更准确。计算机还可以特别快地执行简单明了的任务。在处理任务时,计算机可以在不到一毫秒的时间内从一个任务转换到另一个任务。
人类可以思考和制定策略,而计算机可以分开做许多事情(同时不把各种事情混在一起)。这样,机器能够弥补我们头脑的缺点,而我们的头脑又与机器令人惊骇的能力互补。当采用正确方法时,可以使人类和计算机以这种方式融合在一起,生成一个既不是人类也不是计算机,但是比这两部分之和强大许多的结果。

----------
# Reference 

[1] Haeley Hahn. Unix & Linux 大学教程[M]. 张杰良, 译. 北京:清华大学出版社, 2010.1:82-113.