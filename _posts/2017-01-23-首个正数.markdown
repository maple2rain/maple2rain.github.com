---
layout: post
author: LPF
title: 首个正数
date: 2017-01-23 21:42:09
updated: 2017-02-24 17:04:57
categories:
- Study
- Algorithm
- OL
---
> 给定一个无序整型数组，找出第一个不在数组里的正整数。要求时间复杂度O(n)，空间复杂度为O(1)。

## 举例

输入数组{5, 3, -1, 2}，返回2。

## 思路

借用哈系算法的思路，使用数组下标来存储相应的值，比如第k个元素(对应的下标是k-1)存储数字k，也就是`A[k-1]=k`。
对于大于数组长度的数字或者小于1的数字，则直接抛弃，因为其对寻找地一个不在数组里的整数没有帮助。一旦有了新数组，就从头开始扫描，遇到第一个A[k-1]不等于k时，输出k，否则结果只能是数组长度的下一个数。比如数组{1, 2, 3, 4}，返回5。

## 算法

```java
int firstMissingPositive(int a[]){
    int n = a.length;
    for(int i = 0; i < n; ++i){
        if(a[i] > 0 && a[i] <= n){
            if(a[i] - 1 != i && a[a[i] - 1] != a[i]){
                swap(a[i], a[a[i] - 1])
                --i;
            }
        }
    }
    for(int i = 0; i < n; ++i){
        if(a[i] - 1 != i) return i + 1;
    }
    return n + 1;
}
```