title: 容器盛水
date: 2017-02-09 16:35:36
updated: 2017-02-09 21:06:42
categories:
- Study
- Algorithm
- OL
---
> 给出n个非负整数，每个元素代表平面上的一个点(i, $a_i$)，然后将这些点(i, $a_i$)和x坐标上的点连成(i, 0)连成一条垂直于x轴的线段，找出两条线段，连同x轴组成的容器所容纳的水最多

## 举例

输入数组A = {0, 1, 3, 3, 2}，A[2]和A[4]连同X轴所组成的容器所容纳的水最多，为4。
![](../post_img/589c3383ab6441287f001673)

## 思路

考虑使用首尾相向移动的俩指针。
先计算这两个指针指向元素与X轴围成容器的大小，同时更新当前最大值。然后移动首尾俩指针，直至他们相遇。
那么，如何移动首尾指针呢？
移动指向较短线段的指针，即如果首指针指向较小值，那么首指针往后移动一位;如果尾指针指向较小值，那么尾指针往前移动一位。
如何证明该算法正确？
使用反证法。当前首尾指针分别是i和j，其中$A[i] < A[j]$，那么移动i。假设有个k，在i和j之间，A[k]和A[i]组成的容器所容纳的水最多，那么势必$A[k] > A[i]$。然而，A[i]和A[k]组成容器的容量为$(k - i) * min(A[i], A[k])$，即$(k - i) * A[i]$，小于A[i]与A[j]组成的容器大小：$(j - i) * A[i]$

```java
int maxArea(int A[]){
    int i = 0; j = A.length - 1;
    int result = 0;
    while(i < j){
        int area = Math.min(A[i], A[j]) * (j - i);
        result = Math.max(result, area);
        
        if(A[i] <= A[j]) ++i;
        else --j;
    }
    return result;
}
```