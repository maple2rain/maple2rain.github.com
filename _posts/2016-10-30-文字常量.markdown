---
layout: post
author: LPF
title: 文字常量
date: 2016-10-30 13:39:08
updated: 2017-02-21 16:18:07
tags:
- 80x86
categories:
- Study
- Computer
- PL
- Asm
- 80x86
---

## 1 二进制文字常量

所有汇编器都支持基数为**二**的文字常量。

### 1.1 HLA

**HLA**中的二进制文字常量以百分号字符**%**作为开头，后面跟着一到多位的二进制数字*0*或*1*。
在二进制数的任意相邻两位之间可以放置下划线字符。

```asm
%1001
%0011_1100 //每4位一个下划线分隔
```

### 1.2 Gas

**Gas**中二进制文字常量以**0b**作为开头，后面跟着一到多位二进制数字*0*或*1*。

```asm
0b1001
0b00111100
```

### 1.3 MASM和TASM

在**MASM**和**TASM**中，二进制文字常量以**b**为后缀的一到多位二进制数*0*或*1*。

```asm
1001b
00111100b
```

## 2 十进制文字常量

十进制常量在大多数汇编器都采用标准格式，即不需要特别的前后缀。
**HLA**允许在十进制数的任意相邻两位间插入下划线以分隔。

## 3 十六进制文字常量

### 3.1 HLA

**HLA**中的十六进制文字常量以**$**作为开头，后面是十六进制数0~9，A~F或a~f在组成的串。任意相邻两位之间可以放置下划线字符。

```asm
$1ab0
$1234_ABCD
```

### 3.2 Gas

**Gas**中的十六进制文字常量以**0x**作为开头，后面是十六进制数0~9，A~F或a~f在组成的串。

```asm
0x1ab0
0x1234_ABCD
```

### 3.3 MASM和TASM

**MASM**和**TASM**中的十六进制文字常量以**h**作为后缀，以十六进制数0~9，A~F或a~f为开头组成的串。

```asm
1ab0h
1234_ABCDh
```

## 4 字符与字符串常量

### 4.1 HLA

用单引号包围单个可打印字符，或使用双引号包围字符串。

- 为了引用单引号，需用4个单引号表示
- 可以使用**#**作为前缀，后面接表示ASCII值的二进制、十进制或十六进制数来表示对应字符
- 在字符串包含双引号时，用两个双引号表示

```asm
'a'              //打印字符a
''''             //打印字符'
#10              //打印ASCII值为10的字符
"Say ""Hello"""  //打印Say "Hello"
```

### 4.2 Gas

**Gas**中的字符文字常量由单引号后跟着单个字符表示，或使用双引号包围零到多个字符得到字符串常量，语法与C语言字符串一样，可以通过转义字符*\\*嵌入特殊字符。

```asm
'a              //打印字符a
''              //打印字符'
"Say \"Hello\"" //打印Say "Hello"
```

### 4.3 MASM和TAMS

**MASM**和**TASM**采用的字符与字符串文字常量形式一样，一个或多个字符可以用单或双引号包围住，没有字符常量与字符串常量的区别。

```asm
'a'             //打印字符a
"'"             //打印字符'
'"'             //打印字符"
'Say "Hello"'   //打印Say "Hello"
```

## 5 浮点型文字常量

汇编语言中，浮点型文字常量的表示方法通常与高级语言一样。

```asm
3.14159 //3.14159
1.0e-5  //1 * 10^-5
5e2     //5 * 10^2
```

## 6 符号常量

符号常量就是不可更改的常量，如**C**语言中的**const**变量

### 6.1 HLA

**HLA**定义常量可以用三种方法：

- const

**const**中的标识符不能重新赋值。

```asm
const
    someIdentifier := someValue; //在源文件中出现标识符"someIdentifier"的地方，以"someValue"代替之。
```

- val

**val**中定义的标识符可重新赋值。

```asm
val
    someIdentifier := someValue; //在源文件中出现标识符"someIdentifier"的地方，以"someValue"代替之。
```

- 使用编译期间操作符**?**

在**HLA**的源文件中，只要是**允许有空白**的地方，都可以使用**?**语句嵌入**val**声明。

```asm
?aValConst := 0; //定义一个val常量，并赋值为0
```

### 6.2 Gas

**Gas**通过**.equ**语句在源文件中定义符号常量。

```asm
.equ symbolName, value //定义symbolName的值为value
.equ false, 0          //定义false为0
```

### 6.3 MASM和TAMS

**MASM**和**TASM**也有两种方法在源文件中定义符号常量。

```asm
symbolName equ value //定义symbolName的值为value
false equ 0          //定义false为0

symbolName = value   //定义symbolName的值为value
false = 0            //定义false为0
```