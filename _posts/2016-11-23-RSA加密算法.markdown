---
layout: post
author: LPF
---
title: RSA加密算法
date: 2016-11-23 15:36:24
updated: 2017-02-21 15:19:10
categories:
- Study
- Algorithm
author: LPF
---

* content
{:toc}

本文主要介绍RSA加密算法的步骤及C++算法实现。




# 加密算法之RSA

## 1 RSA算法简介

RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年首次公布，当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。

RSA算法是一种非对称密码算法，所谓非对称，就是指该算法需要一对密钥，使用其中一个加密，则需要用另一个才能解密。

RSA算法基于一个十分简单的数论事实：将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将`乘积`公开作为加密密钥。

## 2 公钥密钥密码体制基本含义

在公开密钥密码体制中，加密密钥（即公开密钥）`public  key`是公开信息，而解密密钥（即秘密密钥）`private key`是需要保密的。加密算法`E`和解密算法`D`也都是公开的。
虽然解密密钥`private key`是由公开密钥`public  key`决定的，但却不能根据`public  key`计算出`private key`。

## 3 密钥生成步骤

假设Alice要给Bob进行加密通信，那么她该如何生成公钥和私钥呢？

1. 随机选择两个不相等的质数p和q，比如61和53
2. 计算p和q的乘积，即
$$ n = 61 * 53 = 3233 $$
`n`的二进制长度就是密钥长度，`3233`的二进制形式为`110010100001`，一共有12位。实际应用中，`RSA`密钥一般是`1024`位，为提高保密级别则使用更长的密钥。
3. 计算n的欧拉函数φ(n)
根据p和q为质数，得欧拉函数为
$$ φ(n) = (p - 1) * (q - 1) $$
从而得出的`φ(n)`为`3120`。
4. 随机选择一个整数e，条件是$1 < e < φ(n)$，且e与φ(n)互质
从而在1~3120中，随机选择一个数，为了方便，可以选择一个质数，并且保证e和φ(n)互质，故在此可以选择`17`
5. 计算e对于φ(n)的模范元素d
所谓`模反元素`就是指有一个整数d，可以使得ed被φ(n)除的余数为1。
$$ ed ≡ 1 (mod φ(n)) $$
这个式子等价于
$$ ed - 1 = yφ(n) $$
于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。
$$ ex + φ(n)y = 1 $$

现`e = 17`，`φ(n)=3120`，即求
$$ 17x + 3120y = 1 $$
解上述方程可使用[扩展欧几里得算法](https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95)求解。现在可算出一组整数解为$(x, y) = (2753, -15)$，即`d = 2753`。
6. 将n和e封装成公钥，将n和d封装成私钥
所以，Alice选择的公钥为`(3233, 17)`，私钥为`(3233, 2753)`。

## 4 加密和解密

### 4.1 使用公钥加密
假设Alice现在要发送加密信息`m`，那么她需要用公钥对其进行加密。需要注意的是，`m`必须是整数(字符串可以取ascii值或unicode值)，且`m`必须小于`n`。

加密使用下列公式：

$$ m^e ≡ c (mod n)$$

其中，上述的`c`为加密密文。

由上述例子，假设Alice发送的明文m为`65`，那么可得到下列等式：
$$ 65^{17} ≡ 2790 (mod 3233)$$
从而，密文`c`为`2790`。Alice将密文`2790`发送给了Bob。

### 4.2 使用私钥解密

解密使用下列公式：

$$ c^d ≡ m (mod n) $$

由密文`c`为`2790`，得下列等式

$$ 2790^{2753} ≡ 65 (mod 3233) $$

从而，Bob解密得出Alice要发出的明文为`65`。
至此，`加密——解密过程`结束。

### 4.3 补充

由于`RSA`算法智能加密小于n的整数，当向加密更大的整数时，可以有两种解决方法：

- 把长信息分隔成短信息，分别对每段加密
- 选择另一种`对称性加密算法`，用这种算法的密钥加密信息，再用`RSA`公钥加密该密钥

## 5 核心算法代码

### 5.1 扩展欧几里得算法

`扩展欧几里得算法`是`辗转相除法`的扩展。
已知整数a、b，扩展欧几里得算法可以在求得a、b的最大公约数的同时，能找到整数x、y（其中一个很可能是负数），使它们满足贝祖等式
$$a x + b y = gcd ( a , b )$$
如果a是负数，可以把问题转化成
$$| a | ( − x ) + b y = gcd ( | a | , b )$$

通常谈到最大公约数时，都会提到一个非常基本的事实：给予二整数a、b，必存在有整数x、y使得$ax + by = gcd(a,b)$
有两个数a,b，对它们进行辗转相除法，可得它们的最大公约数。然后，收集辗转相除法中产生的式子，倒回去，可以得到$ax+by=gcd(a,b)$的整数解。

- C++代码实现

```c++
long gcdEX(long a, long b, long &x, long &y)
{
    if(b == 0){
        x = 1;
        y = 0;
        return a;   //a is the gcd
    }else{
        long ret = gcdEX(b, a % b, x, y);   //recursive compute the value
        long tmp = x;   
        x = y;  //exchange
        y = tmp - a / b * y; //exchange 
        return ret;
    }
}
```

### 5.2 快速模指运算

单纯先求出幂指数再进行求余的话，运行时间会变成非常大，且不得不要求写出大整数。使用快速模指运算可以提高运行效率，且无需进行大整数幂指数求解。当然，如果本身要求密钥长度很长，也是需要用到大整数的。

```c++
//mode extend, compute the value of (a ^ n) % m
long modeEx(long a, long n, long m)
{
    long ret = 1;

    while(n){
        if(n & 0x01){//if the last bit of n is 0x01
            ret = ret * a % m;//then compute this
        }

        a = a * a % m;
        n /= 2;
    }
    return ret;
}
```

### 5.3 获取素数

一种比较有效的获取素数的方法是是使用`筛除法`，即将合数逐步过滤出，算法过程如下：

```c++
long selectPrimeNum(const long random)
{
    std::vector<bool> arr(random, 0);
    long sq = sqrt(random) + 1;

    for (long i = 2; i < sq; ++i){
        if(arr[i] == 0){ //if arr[i] is not a non_prime number, that make it true
            for(long j = 2; j < random; ++j){
                if(j % i == 0 && j != i){
                    arr[j] = 1;  //make it true
                }
            }
        }
    }
]
```

一种改进的方法为欧拉筛除法，其思想是把确保合数只被过滤一次，而上述的方法则会被过滤多次，算法过程如下：

```c++
int cnt = 0;
for(i = 2; i <= n; i++)
{
    if(arr[i] == 0)
    {
        prime[++cnt] = i;   //record the prime number into array prime
    }
    for(j = 1; j <= cnt; j++)
    {
        if(i * prime[j] > n)
            break;
        arr[i * prime[j]] = 1;
        if(i % prime[j] == 0)
        //if (i % prime[j] == 0), then compute (i % prime[j + 1]) is redundant
            break;
    }
}
```

## 6 程序演示

- 初始界面

初始界面与之前的[PlayFair算法](http://blog.leanote.com/post/maple2snow/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B9%8BPlayfair%E5%8F%8AHill%E7%AE%97%E6%B3%95)略有更改，新增了`RSA`加密选项，如下图所示。

<div align=center>
	<img src="../post_img/58355defab6441366c00f50a" title="初始界面" />
</div>
	
- 输入质数生成公钥和私钥

在选择了`RSA`算法后，在`Key`处输入密钥`(61, 53)`，并点击`More Info`按钮，可以看到公钥和私钥生成情况。在此，生成的公钥e是随机选择的。

<div align=center>
	<img src="../post_img/58355f1fab6441378100fb4b" title="输入质数生成公钥和私钥" />
</div>

- 加密

在`Clear Text`框中，可以输入明文，在此输入`65`，点击`Encrypt`按钮，可以观察到`Cipher Text`框中显示密文`2730`。

<div align=center>
	<img src="../post_img/58355ffeab6441378100fb6a" title="RSA加密" />
</div>

- 解密

为看到解密效果，可以先将`Clear  Text`框中的内容清除，再点击`Decrypt`按钮，此时可以看到密文被解密为明文`65`。

在加密时，可以输入一个整数值，表示随机生成在此整数值以下的素数，并依此生成公钥和私钥，在此就不作演示，可访问[程序仓库](https://github.com/maple2winter/Encrypt)进行进一步实验。

## 7 总结

编写`RSA`算法最重要的步骤还是先弄清楚算法的数学底蕴。如果对算法所依赖的数学知识不熟悉的话，一切都会变得难以入手。在写程序时，参照了[阮一峰的RSA算法原理](http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html)，浅显易懂的语言让我很快就对算法感到很清晰。尽管在课上讲过内容，但实际编写时还是忘记了细节。而那篇博客则从数学知识到算法过程都讲得很清楚，本篇博客也是吸收了他的例子精华。
所以，还是要多多向高手学习，也要博览了。