title: 并发
date: 2017-01-05 16:20:09
updated: 2017-02-21 15:07:04
tags:
- OS
categories:
- Study
- Computer
- OS
---
## 1 概述

软件并发表现为4个层次

- 指令层次(同时运行两条或更多的机器指令)
- 语句层次(同时运行两条或更多的语句)
- 单位层次(同时运行两个或更多的子程序单位)
- 程序层次(同时运行两个或更多的程序)

### 2.1 多处理器计算机

多处理器计算机的处理器是完全相同的，他们可以跟别执行一个指令流的不同指令。

#### 2.1.1 单指令多数据体系结构

在不同的数据上同时运行相同指令的多处理器计算机称为“**单指令多数据(Single Instruction Multiple Data, SIMD)**”体系结构的计算机。
每个处理器都有自己的局部存储器，由一个处理器来控制其他处理器的操作。除了控制器之外，其他所有处理器都在同一时刻执行相同的指令。
这种类型的机器主要用于科学计算程序，用于执行大量计算的程序。

#### 2.1.2 多指令多数据体系结构

具有独立地操作能力，并且这些操作能够被同步的多处理器计算机称为“**多指令多数据(Multiple Instruction Multiple Data, MIMD)**体系结构”的计算机。
每个处理器都执行自己的指令流，支持单位层次的并发。
其具有两种不同的配置结构，即分布式与共享存储系统。

- 分布式

    每一个处理器都有自己的存储器。
    一台分布式MIMD机器能够被装入一个盒子之中，或者是可以被分布在一个大的区域之中。

- 共享存储

    必须提供一些同步方法来避免存储访问间的冲突，当然分布式也需要，以便同时操作与同一程序之上。

## 3 并发的种类

### 3.1 物理并发

存在着多个处理器可供使用，并且来自相同程序的介个程序单位同时地运行。

### 3.2 逻辑并发

假设存在着多个处理器提供真实的并发，但事实上，程序是在但处理被分时地执行。

## 4 任务

任务(**task**)是一个可以与同一程序的其他单位一起被并发执行的程序单位，程序中的每一个任务提供一条控制线，有时也将任务称为进程(**process**)。

### 4.1 任务与子程序

- 任务可以被隐式地启动，子程序必须被显示地调用
- 程序单位调用一个任务时，无需等待任务执行完成即可继续自己的工作，但必须等待子程序的完成
- 任务执行完毕时，控制可能会也可能不会返回到任务执行的程序单位

### 4.2 任务种类

1. 重任务(**heavyweight task**)

    在自己的地址空间中执行的任务。

2. 轻任务(**lightweight task**)

    所有轻任务都在统一地址空间中执行。

### 4.3 同步

同步是一种控制任务执行顺序的机制，如果任务A要访问共享数据单位x，而任务B正在处理x，则任务A必须等待任务B完成对x的处理。

#### 4.3.1 合作同步(**cooperation synchronization**)

当任务A在继续他的执行之前，需要等待任务B完成某种特定任务，则他们之间就需要合作同步。

- 生产者-消费者问题

    比如，某一个程序单位产生某一种数据或资源，而另外的一个程序单位将使用它。通常，所产生的数据值被生产单位放在一个存储缓冲区，然后再被消费单位从缓冲区中取走。
    这种在缓冲区里存放和取走的操作必须是同步的。如果缓冲区为空，则消费单位不被允许从缓冲区取走数据；如果缓冲区是满的，则生产单位也不被允许往缓冲区存放数据。
    

#### 4.3.2 竞争同步(**competition synchronization**)

当两个任务都需要不能同时使用某种资源时，则称为竞争同步，任务需要等待其他任务完成在共享数据上正在进行的任何处理后才能继续执行。

防止两个任务同时存取一个共享的数据结构时，可能会破坏共享数据的正确性，因此必须保证共享数据的互斥访问。

**提供互斥访问的一种方法**

- 将某资源看成是任务可以拥有的某种物体，并且在任何时刻，只允许一个任务来拥有它。
- 为了得到一个共享资源，任务必须首先请求它。
- 当一个任务使用完了他所拥有的共享资源时，必须放弃对于资源的持有，以便其他任务来使用。
